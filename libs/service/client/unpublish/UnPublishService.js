"use strict";var e=this&&this.__awaiter||function(e,i,t,s){return new(t||(t=Promise))((function(o,n){function r(e){try{a(s.next(e))}catch(e){n(e)}}function l(e){try{a(s.throw(e))}catch(e){n(e)}}function a(e){var i;e.done?o(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(r,l)}a((s=s.apply(e,i||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.unPublishService=void 0;const t=require("../../../utils/CommonConstants"),s=require("../../../entity/PackageMetaData"),o=require("../../../common/DbFactory"),n=require("../../../utils/CommonUtil"),r=require("../../../entity/PackageManifest"),l=require("../../../packages/config/config"),a=require("./UnPublishRepository"),d=require("../../../utils/FsUtil"),c=i(require("path")),u=require("../../../common/FSFactory"),h=require("../../../plugins/cache/CacheFactory"),y=require("../../../tools/json5"),m=require("../dist-tags/DistTagsService"),p=require("../publish/PublishRepository"),g=require("./checker/UnPublishChecker"),P=require("./UnPublishBO"),b=require("../../../packages/log"),f=require("../../../common/RepoError"),v=require("../../../common"),F=require("../../../common/ErrorCode"),I=require("../install/InstallService"),A=require("../../../common/DbAndStoreType");exports.unPublishService=new class{constructor(){this.cache=h.CacheFactory.createCache(),this.dbCache=h.CacheFactory.createCache({mode:"db"}),this.distTagsService=m.DistTagsService.getInstance(),this.installService=I.InstallService.getInstance()}unPublish(i,t,s,o,n=!1){return e(this,void 0,void 0,(function*(){const e=[{repoName:i,packageName:t,version:s}];yield this.batchUnPublish(e,o,n)}))}batchUnPublish(i,t,s=!1){return e(this,void 0,void 0,(function*(){const e=new P.UnPublishBO(i,s),o=g.UnPublishChecker.getInstance();yield o.check(e,t),yield this.doUnPublish(e,s)}))}doUnPublish(i,t){return e(this,void 0,void 0,(function*(){const e=[],s=[];for(const o of i.pkgMap.values()){const i=o.repoName,n=o.packageName,r=o.versions;l.config.db.type===A.DbType.FileDb?yield this.unPublishTask(i,n,r,t,s):e.push(this.unPublishTask(i,n,r,t,s))}if(e.length>0&&(yield Promise.all(e)),s.length>0)throw new f.RepoServerError(v.ErrorCode.unPublishFailed,`fail to unPublish package(s): ${s.join(",")}`,null,{messageCN:`${F.MESSAGE_CN[v.ErrorCode.unPublishFailed]}: ${s.join(",")}`})}))}unPublishTask(i,s,o,n,r){return e(this,void 0,void 0,(function*(){try{const e=yield p.publishRepository.selectPackageMetaDataByName(i,s);o?yield this.doUnPublishPkgByVersions(i,s,o,e):yield this.doUnPublishPkgAllVersions(e,i,s),n&&(yield this.distTagsService.deleteTagByPkg(i,s,o)),yield this.cache.delete(`${t.METADATA_CACHE_PRE}${i}:${s}`)}catch(e){b.OhpmLazyLogger.error(e),r.push(`${s}`)}}))}doUnPublishPkgAllVersions(i,n,r){return e(this,void 0,void 0,(function*(){const e=yield u.FsFactory.getInstance();yield e.delete(i.metaJsonFileId),yield o.commonDB.deleteById(s.OHPM_PACKAGE_METADATA_DB_NAME,i.id);const{recordList:d}=yield a.unPublishRepository.selectPublishedCategorys(n,r);yield this.deleteManifestFileAndUpdate(d),yield a.unPublishRepository.deleteDependencies(n,r),yield this.installService.deleteByPackageNameAndVersion(n,r);const c=`${t.UPLOAD_LOCK_CACHE_PRE}${n}:${r}`;yield this.dbCache.set(c,1,{ttl:60*l.config.upload_lock_hour*60})}))}doUnPublishPkgByVersions(i,n,r,d){return e(this,void 0,void 0,(function*(){const e=yield a.unPublishRepository.selectPublishedCategorys(i,n,r);yield this.deleteManifestFileAndUpdate(e.recordList);const{total:c,recordList:h}=yield a.unPublishRepository.selectPublishedCategorys(i,n);if(yield a.unPublishRepository.deleteDependencies(i,n,r),yield this.installService.deleteByPackageNameAndVersion(i,n,r),0===c){const e=yield u.FsFactory.getInstance();yield e.delete(d.metaJsonFileId),yield o.commonDB.deleteById(s.OHPM_PACKAGE_METADATA_DB_NAME,d.id);const r=`${t.UPLOAD_LOCK_CACHE_PRE}${i}:${n}`;yield this.dbCache.set(r,1,{ttl:60*l.config.upload_lock_hour*60})}else yield this.rebuildMetadataJson(d,r,h[0])}))}deleteManifestFileAndUpdate(i){return e(this,void 0,void 0,(function*(){for(const e of i){e.status=t.PackageStatus.Unpublished,e.unPublishTime=Date.now(),e.updateTime=e.unPublishTime;const i=yield u.FsFactory.getInstance();e.publishJsonFileId&&(yield i.delete(e.publishJsonFileId)),e.harFileId&&(yield i.delete(e.harFileId)),e.hspFileId&&(yield i.delete(e.hspFileId)),e.readmeFileId&&(yield i.delete(e.readmeFileId)),e.changelogFileId&&(yield i.delete(e.changelogFileId)),yield o.commonDB.updateById(r.OHPM_PACKAGE_MANIFEST_DB_NAME,e.id,e)}}))}rebuildMetadataJson(i,t,r){return e(this,void 0,void 0,(function*(){const e=n.CommonUtil.genRandomTempDir(),l=yield u.FsFactory.getInstance();try{yield d.FsUtil.createDirIfNotExists(e);const a=c.default.join(e,"metadata.json"),u=(yield l.download(i.metaJsonFileId)).toString(),h=y.JSON5.parse(u);for(const e of t){let i=Object.entries(h["dist-tags"]);i=i.filter((i=>i[1]!==e)),h["dist-tags"]=Object.fromEntries(i),h["dist-tags"].latest=r.version,delete h.versions[e],h._rev=""+(+h._rev-1),delete h.time[e],h.time.modified=n.CommonUtil.getBeiJingTimeIsoStr()}yield d.FsUtil.writeFile(a,JSON.stringify(h,null,2));const m={repoName:i.repoName,packageName:i.name,version:"",isPackage:!0},p=i.metaJsonFileId;i.metaJsonFileId=yield l.save(a,m),i.latestVersion=r.version,i.latestPublishTime=r.publishTime,i.authorId=r.authorId,i.authorName=r.authorName,i.description=r.description,i.keywords=r.keywords,i.license=r.license,i.updateTime=(new Date).getTime(),yield o.commonDB.updateById(s.OHPM_PACKAGE_METADATA_DB_NAME,i.id,i),yield this.deleteOldMetaDataIfNameMismatch(p,i,l)}finally{yield d.FsUtil.rm(e,{recursive:!0,force:!0})}}))}markDeprecate(i,t,s,o){return e(this,void 0,void 0,(function*(){const e=n.CommonUtil.genRandomTempDir();try{yield d.FsUtil.createDirIfNotExists(e);const n=c.default.join(e,"metadata.json"),r=yield u.FsFactory.getInstance(),l=(yield r.download(i.metaJsonFileId)).toString(),a=y.JSON5.parse(l);o?o.forEach((e=>{a.versions[e].deprecate=!0})):Object.values(a.versions).forEach((e=>{e.deprecate=!0})),yield d.FsUtil.writeFile(n,JSON.stringify(a,null,2));const h={repoName:t,packageName:s,version:"",isPackage:!0};i.metaJsonFileId=yield r.save(n,h)}finally{yield d.FsUtil.rm(e,{recursive:!0,force:!0})}}))}deleteOldMetaDataIfNameMismatch(i,t,s){return e(this,void 0,void 0,(function*(){i!==t.metaJsonFileId&&(yield s.delete(i))}))}};