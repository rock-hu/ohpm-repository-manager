"use strict";var e=this&&this.__awaiter||function(e,t,r,s){return new(r||(r=Promise))((function(n,i){function o(e){try{c(s.next(e))}catch(e){i(e)}}function u(e){try{c(s.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,u)}c((s=s.apply(e,t||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ConcurrentExecutor=exports.RETRY_INTERVAL_MAX=exports.RETRY_INTERVAL_MIN=exports.RETRY_TIMES_MAX=exports.RETRY_TIMES_MIN=exports.MAX_CONCURRENT_MAX=exports.MAX_CONCURRENT_MIN=void 0;const t=require("../packages/log"),r=require("./ExecutorResult"),s=require("./Queue");exports.MAX_CONCURRENT_MIN=1,exports.MAX_CONCURRENT_MAX=200,exports.RETRY_TIMES_MIN=0,exports.RETRY_TIMES_MAX=5,exports.RETRY_INTERVAL_MIN=1e3,exports.RETRY_INTERVAL_MAX=6e4;const n=/^\d+$/;class i{constructor(){this.taskQueue=new s.Queue(null),this.executingTasks=[],this.executorRunning=!1,this.retry=(r,s,n)=>{let i=s;const o=this.getTaskName(r),u=function(){return e(this,void 0,void 0,(function*(){try{return yield r()}catch(e){if(i<=0)throw t.OhpmLazyLogger.error(`Found exception: ${e}, reached retry limit or non retryable error encountered.`),e;return t.OhpmLazyLogger.debug(`Executor ${o} execute failed: ${e}, will retry after ${n} ms with ${i} retries remaining.`),i-=1,yield new Promise((e=>setTimeout(e,n))),u()}}))};return u}}static creatInstance(){return new i}addAsyncTask(e){this.taskQueue.push(e)}run(s,n,i,o=!1){return e(this,void 0,void 0,(function*(){const e=new r.ExecutorResult;if(this.executorRunning)return e.addExtraError("the executor is running!");if(this.taskQueue.isEmpty())return e;if(!this.executorParamValid(s,n,i,e))return e;this.resetExecutor(),t.OhpmLazyLogger.debug(`Executor running [max_concurrent:${s}, retry_times:${n}, retry_interval:${i}]`);const u=(new Date).getTime();for(;;){if(!o&&e.getRejects().length>0){t.OhpmLazyLogger.debug("Executor found task execute failed, exit process!");break}const r=this.taskQueue.pop();if(!r&&0===this.executingTasks.length){t.OhpmLazyLogger.debug("Executor all task execute finished.");break}if(r){const t=this.retry(r,n,i)().then((t=>{e.addResolve(t)})).catch((t=>{e.addReject(t)})).finally((()=>this.executingTasks.splice(this.executingTasks.indexOf(t),1)));this.executingTasks.push(t)}(this.executingTasks.length>=s||!r)&&(yield Promise.race(this.executingTasks))}return this.executorRunning=!1,this.printCostTime(u,"Run"),e}))}runWithErrorHandle(t,r,s,n=!1){return e(this,void 0,void 0,(function*(){const e=yield this.run(t,r,s,n);e.isSuccess()||this.handleError(e)}))}handleError(e){const r=[];e.getExtraErrors().length&&e.getExtraErrors().forEach((e=>{r.push(e)})),e.getRejects().length&&e.getRejects().forEach((e=>{r.push(e)}));const s=r.toString();throw t.OhpmLazyLogger.error(`ERUNNING execute tasks failed, ${s}`),s}resetExecutor(){this.executorRunning=!0,this.executingTasks=[]}getTaskName(e){return e.toString().replace("()","").replace("=>","").replace(/\s+/,"")}executorParamValid(e,t,r,s){return!!this.checkMaxConcurrent(e,s)&&(!!this.checkRetryTimes(t,s)&&this.checkRetryInterval(r,s))}checkMaxConcurrent(e,t){return!!this.isNumValid(e,exports.MAX_CONCURRENT_MIN,exports.MAX_CONCURRENT_MAX)||(t.addExtraError(`Expected "max_concurrent" to be a integer number of [${exports.MAX_CONCURRENT_MIN}, ${exports.MAX_CONCURRENT_MAX}]`),!1)}checkRetryTimes(e,t){return!!this.isNumValid(e,exports.RETRY_TIMES_MIN,exports.RETRY_TIMES_MAX)||(t.addExtraError(`Expected "retry_times" to be a integer number of [${exports.RETRY_TIMES_MIN}, ${exports.RETRY_TIMES_MAX}]`),!1)}checkRetryInterval(e,t){return!!this.isNumValid(e,exports.RETRY_INTERVAL_MIN,exports.RETRY_INTERVAL_MAX)||(t.addExtraError(`Expected "retry_interval" to be a integer number of [${exports.RETRY_INTERVAL_MIN}, ${exports.RETRY_INTERVAL_MAX}]`),!1)}isNumValid(e,t,r){return n.test(e)&&e>=t&&e<=r}printCostTime(e,r){const s=(new Date).getTime()-e,n=Math.floor(s/1e3),i=s%1e3,o=r?`${r}`:"";t.OhpmLazyLogger.debug(`Executor ${o} completed in ${n}s ${i}ms`)}}exports.ConcurrentExecutor=i;