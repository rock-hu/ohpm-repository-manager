"use strict";var e=this&&this.__awaiter||function(e,r,o,i){return new(o||(o=Promise))((function(t,n){function d(e){try{s(i.next(e))}catch(e){n(e)}}function u(e){try{s(i.throw(e))}catch(e){n(e)}}function s(e){var r;e.done?t(e.value):(r=e.value,r instanceof o?r:new o((function(e){e(r)}))).then(d,u)}s((i=i.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.groupService=void 0;const r=require("../../utils/PageUtil"),o=require("../../common"),i=require("../../common/RepoError"),t=require("./GroupMemberRepository"),n=require("../../entity/GroupMember"),d=require("../../utils/CommonConstants"),u=require("../../packages/log"),s=require("../package/PackageRepository"),p=require("../user/UserRepository"),l=require("../../packages/definitions/types"),m=require("../../utils/RandomUtil"),a=require("../user/UserService"),g=require("./GroupDataSearchFilter");function c(r){return e(this,void 0,void 0,(function*(){r&&(r=r.replace(/[-_]/g,""));const e=yield t.groupMemberRepository.findByFilter({role:l.RoleType.Admin});for(const t of e.recordList){const e=t.group_name.replace(/[-_]/g,"");if(r===e)throw new i.RepoClientError(o.ErrorCode.DuplicateGroupName,`Duplicate name: ${r}, when the symbols "-" and "_" are removed.`)}}))}function y(r,d){return e(this,void 0,void 0,(function*(){const u=yield function(r,d){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_id:r,member_id:d});if(!e||1!==e.total){const e=yield t.groupMemberRepository.findByFilter({group_id:r});if(!e||0===e.total)throw new i.RepoClientError(o.ErrorCode.GroupNotExist,`Can't find group which groupId is "${r}".`);throw new i.RepoAccessError(o.ErrorCode.AccessDenied,"No operation permission")}return new n.GroupMember(e.recordList[0])}))}(r,d);if(u.getRole()===l.RoleType.Member)throw new i.RepoAccessError(o.ErrorCode.AccessDenied,"No operation permission.");return u}))}function f(r){return e(this,void 0,void 0,(function*(){return(yield s.packageRepository.findByFilter({groupName:r,status:d.PackageStatus.Published})).total}))}function h(r){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_id:r});if(!e||0===e.total)return 0;return(yield v(e.recordList)).length}))}function b(r){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_id:r,role:l.RoleType.Admin});if(!e||0===e.total)return 0;return(yield v(e.recordList)).length}))}function v(r){return e(this,void 0,void 0,(function*(){return function(r,o){return e(this,void 0,void 0,(function*(){const e=yield Promise.all(r.map(o));return r.filter(((r,o)=>e[o]))}))}(r,(r=>e(this,void 0,void 0,(function*(){r=new n.GroupMember(r);if(!(yield p.userRepository.findUserById(r.getMemberId()))){try{u.OhpmLazyLogger.info(`delete "group_member" id is "${r.getId()}" when user "${r.getMemberId()}" doesn't exist.`),yield t.groupMemberRepository.deleteById(r.getId()),u.OhpmLazyLogger.info('delete "group_member" successfully:',`groupMember's id is "${r.getId()}", operator is admin.`)}catch(e){u.OhpmLazyLogger.warn(`fail to delete "group_member" which id is "${r.getId()}".`)}return!1}return!0}))))}))}function R(r){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_id:r});if(!e||0===e.total)throw new i.RepoClientError(o.ErrorCode.GroupNotExist,`Can't find group which groupId is "${r}".`);return e}))}function w(r){return e(this,void 0,void 0,(function*(){if((yield a.userService.getUserByUserId(r)).role===l.RoleType.Member)throw new i.RepoAccessError(o.ErrorCode.AccessDenied,"No operation permission.")}))}function G(e,r,o,i,t){return{id:e.getGroupId(),name:e.getGroupName(),description:e.getGroupDescription(),owner:i,packageNum:r,memberNum:o,groupMember:t,createTime:e.getGroupCreateTime()}}function M(e){return{id:e.id,userName:e.member_name,createTime:e.create_time,role:e.role}}function E(e){return{id:e.id,name:e.name,version:e.version,description:e.description,license:e.license,author:e.authorName,keywords:e.keywords}}function _(r,o){return e(this,void 0,void 0,(function*(){const e=yield p.userRepository.findUserById(o),i=yield t.groupMemberRepository.findByFilter({group_id:r,member_id:o});return{isAdmin:e&&e.role===l.RoleType.Admin,isGroupMember:i&&0!==i.total}}))}exports.groupService=new class{addGroup(r,o){return e(this,void 0,void 0,(function*(){yield c(o.getGroupName());const e=yield p.userRepository.findUserById(r);o.setMemberName(e.name),o.initBaseDate(r),o.setGroupCreateTime(o.getCreateTime()),o.setGroupId(m.RandomUtil.generateUUID()),o.setRole(l.RoleType.Admin),yield t.groupMemberRepository.insert(o),u.OhpmLazyLogger.info("insert group successfully:",`group's id is "${o.getId()}", operator's id is "${o.getUpdatedBy()}".`)}))}getGroupList(o,i,d){return e(this,void 0,void 0,(function*(){const u=(yield a.userService.getUserByUserId(o)).role===l.RoleType.Admin,s=yield function(o,i,n){return e(this,void 0,void 0,(function*(){let e;const d=new g.GroupDataSearchFilter(i).getFilterGroup();if(o)e=(yield t.groupMemberRepository.getGroupListByFilter(1,r.MAX_PAGE_SIZE,d)).recordList;else{const o=yield t.groupMemberRepository.getGroupListByFilter(1,r.MAX_PAGE_SIZE,d),i=yield t.groupMemberRepository.findByFilter({member_id:n},!0,1,r.MAX_PAGE_SIZE);u=o.recordList,s=i.recordList,e=u.filter((e=>s.some((r=>r.group_name===e.group_name))))}var u,s;const p=new Set;for(const r of e)p.add(r.group_name);return p}))}(u,i,o),p=(d.getCurrentPage()-1)*d.getPageSize(),m=[...s].slice(p,p+d.getPageSize()),c=yield function(r){return e(this,void 0,void 0,(function*(){const e=[];for(const o of r){const r=yield t.groupMemberRepository.findByFilter({group_name:o,role:l.RoleType.Admin}),i=[];for(const e of r.recordList)i.push(e.member_name);const d=yield t.groupMemberRepository.findByFilter({group_name:o,role:l.RoleType.Member}),u=[];for(const e of d.recordList)u.push(e.member_name);const s=r.recordList[0],p=new n.GroupMember(s),m=yield h(p.getGroupId()),a=yield f(p.getGroupName());e.push(G(p,a,m,i,u))}return e}))}(m);return r.PageUtil.formPage(s.size,d.getCurrentPage(),d.getPageSize(),c)}))}getGroupDetail(r,t){return e(this,void 0,void 0,(function*(){yield function(r,t){return e(this,void 0,void 0,(function*(){const{isAdmin:e,isGroupMember:n}=yield _(r,t);if(!e&&!n)throw new i.RepoClientError(o.ErrorCode.GetGroupDetailError,`current user with id "${t}" does not have the permission to view the group details.`)}))}(r,t);const{isAdmin:d,isGroupMember:u}=yield _(r,t),s=d&&!u,p=yield R(r),m=new n.GroupMember(p.recordList[0]),a=yield function(r){return e(this,void 0,void 0,(function*(){const e=[];for(const o of r.recordList)o.role===l.RoleType.Admin&&e.push(o.member_name);return e}))}(p);return{name:m.getGroupName(),owner:a,description:m.getGroupDescription(),isAdminNotGroupUser:s}}))}updateGroup(r,d){return e(this,void 0,void 0,(function*(){const e=yield y(d.getId(),r);if(e.getGroupName()!==d.getGroupName()){yield c(d.getGroupName());if((yield f(e.getGroupName()))>0)throw new i.RepoClientError(o.ErrorCode.ForbidGroupNameModification,`Illegal parameter - the group "${e.getGroupName()}" has packages under it, \n          so that the name field cannot be modified.`)}const s=yield t.groupMemberRepository.findByFilter({group_id:e.getGroupId()});for(const e of s.recordList){const o=new n.GroupMember(e);o.setGroupName(d.getGroupName()),o.setGroupDescription(d.getGroupDescription()),o.updateBaseDate(r),yield t.groupMemberRepository.updateById(o)}u.OhpmLazyLogger.info("update group successfully:",`group's name is "${e.getGroupName()}", operator's id is "${e.getUpdatedBy()}".`)}))}deleteGroup(r,n){return e(this,void 0,void 0,(function*(){const e=yield y(r,n);if((yield f(e.getGroupName()))>0)throw new i.RepoClientError(o.ErrorCode.ForbidDeleteGroup,`Illegal parameter - the group "${e.getGroupName()}" has packages under it, so that you can't delete it.`);try{yield t.groupMemberRepository.deleteByGroupId(r),u.OhpmLazyLogger.info("delete group successfully:",`group 's name is "${e.getGroupName()}", operator's id is "${n}".`)}catch(e){u.OhpmLazyLogger.error(`fail to delete member whose groupId is "${r}".`,e)}}))}getPackageList(t,u,p){return e(this,void 0,void 0,(function*(){yield function(r,t){return e(this,void 0,void 0,(function*(){const{isAdmin:e,isGroupMember:n}=yield _(r,t);if(!e&&!n)throw new i.RepoClientError(o.ErrorCode.GetGroupPackageListError,`current user with id "${t}" does not have the permission to view the group package list.`)}))}(t,u);const l=yield R(t),m=new n.GroupMember(l.recordList[0]),a=yield s.packageRepository.findByFilter({groupName:m.getGroupName(),status:d.PackageStatus.Published},p.getCurrentPage(),p.getPageSize()),g=[];for(const e of a.recordList)g.push(E(e));return r.PageUtil.formPage(a.total,p.getCurrentPage(),p.getPageSize(),g)}))}addMember(r,u,s){return e(this,void 0,void 0,(function*(){const l=yield y(r,u),m=yield function(r,n){return e(this,void 0,void 0,(function*(){if(!n||!d.USER_NAME_REGEX.test(n))throw new i.RepoClientError(o.ErrorCode.UserNameError,"Invalid user name.");const e=yield t.groupMemberRepository.findByFilter({group_id:r,member_name:n});if(e&&e.total>0)throw new i.RepoClientError(o.ErrorCode.MemberAlreadyExist,`The member "${n}" already exists.`);const u=yield p.userRepository.findUserByName(n);if(!u||u.total<=0)throw new i.RepoClientError(o.ErrorCode.UserNotFound,`The user named "${n}" does not exist.`);return u.recordList[0]}))}(r,s),a={group_id:r,member_id:m.id,member_name:s,group_create_time:l.getGroupCreateTime(),group_description:l.getGroupDescription(),group_name:l.getGroupName()},g=new n.GroupMember(a);g.initBaseDate(u),yield t.groupMemberRepository.insert(g)}))}deleteMember(r,n,d){return e(this,void 0,void 0,(function*(){yield y(r,d);const e=yield t.groupMemberRepository.findById(n);if(!e)throw new i.RepoClientError(o.ErrorCode.DeleteGroupMemberError,`Fail to delete groupMember whose groupMemberId is "${n}", the groupMember cannot be found under group whose groupId is "${r}"!`);if(e.role===l.RoleType.Admin){if(1===(yield t.groupMemberRepository.findByFilter({group_id:r,role:l.RoleType.Admin})).total)throw new i.RepoClientError(o.ErrorCode.ForbidDeleteOwner,`Can't delete the unique owner of the group whose groupId is "${r}"`)}yield t.groupMemberRepository.deleteById(n),u.OhpmLazyLogger.info("delete group_member successfully:",`groupMember's id is "${n}", operator's id is "${d}".`)}))}exists(r){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_name:r});return e&&e.total>0}))}isMember(r,o){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_name:r,member_id:o});return e&&1===e.total}))}isMemberByAuthPlugin(r,o){return e(this,void 0,void 0,(function*(){if(o.getIsAuthPlugin()){const e=o.getBelongGroupList();return e&&e.includes(r)}return!1}))}isAdmin(r,o){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_name:r,member_id:o,role:l.RoleType.Admin});return e&&1===e.total}))}isAdminByAuthPlugin(r,o){return e(this,void 0,void 0,(function*(){if(o.getIsAuthPlugin()){const e=o.getGroupAdminList();return e&&e.includes(r)}return!1}))}deleteGroupListByUserId(r){return e(this,void 0,void 0,(function*(){yield t.groupMemberRepository.deleteByUserId(r),u.OhpmLazyLogger.info("delete group_member successfully:",`groupMember's memberId is "${r}", operator's id is "${r}".`)}))}getGroupListByOwnerId(r){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({member_id:r,role:l.RoleType.Admin});let o=[];return e&&e.recordList&&(o=e.recordList),o}))}findUniqueGroupAdminListByOwnerId(r){return e(this,void 0,void 0,(function*(){const e=[],o=yield exports.groupService.getGroupListByOwnerId(r);for(const r of o){const o=new n.GroupMember(r);1===(yield b(o.getGroupId()))&&e.push(o)}return e}))}addAdmin(r,u,s){return e(this,void 0,void 0,(function*(){yield w(u);let m,a=yield function(r,o){return e(this,void 0,void 0,(function*(){return t.groupMemberRepository.findByFilter({group_id:r,member_name:o})}))}(r,s);a&&0===a.total&&(m=!0,a=yield R(r));const g=yield function(r,t){return e(this,void 0,void 0,(function*(){if(!t||!d.USER_NAME_REGEX.test(t))throw new i.RepoClientError(o.ErrorCode.UserNameError,"Invalid user name.");const e=yield p.userRepository.findUserByName(t);if(!e||e.total<=0)throw new i.RepoClientError(o.ErrorCode.UserNotFound,`The user named "${t}" does not exist.`);return e.recordList[0]}))}(0,s),c=new n.GroupMember(a.recordList[0]);if(m||c.getRole()!==l.RoleType.Member){if(!m&&c.getRole()===l.RoleType.Admin)throw new i.RepoClientError(o.ErrorCode.MemberAdminAlreadyExist,`The adminMember "${s}" already exists.`);{const e={group_id:r,member_id:g.id,member_name:s,group_create_time:c.getGroupCreateTime(),group_description:c.getGroupDescription(),group_name:c.getGroupName(),role:l.RoleType.Admin},o=new n.GroupMember(e);o.initBaseDate(u),yield t.groupMemberRepository.insert(o)}}else c.setRole(l.RoleType.Admin),yield t.groupMemberRepository.updateById(c)}))}deleteAdmin(r,n,d){return e(this,void 0,void 0,(function*(){yield w(d),yield R(r);if(!(yield t.groupMemberRepository.findById(n)))throw new i.RepoClientError(o.ErrorCode.DeleteGroupAdminError,`Fail to delete groupAdmin: groupAdmin with groupMemberId "${n}" is not admin of group with groupId "${r}".`);if(1===(yield t.groupMemberRepository.findByFilter({group_id:r,role:l.RoleType.Admin})).total)throw new i.RepoClientError(o.ErrorCode.ForbidDeleteOwner,`Can't delete the unique owner of the group whose groupId is "${r}"`);yield t.groupMemberRepository.deleteById(n)}))}getMemberList(n,d,u,s=l.RoleType.Member){return e(this,void 0,void 0,(function*(){let p;yield function(r,t){return e(this,void 0,void 0,(function*(){const{isAdmin:e,isGroupMember:n}=yield _(r,t);if(!e&&!n)throw new i.RepoClientError(o.ErrorCode.GetGroupMemberListError,`current user with id "${t}" does not have the permission to view the group member list.`)}))}(n,d),p=s===l.RoleType.Admin?yield function(r){return e(this,void 0,void 0,(function*(){const e=yield t.groupMemberRepository.findByFilter({group_id:r,role:l.RoleType.Admin});if(!e||0===e.total)throw new i.RepoClientError(o.ErrorCode.GroupAdminNotExist,`Can't find groupAdmin which groupId is "${r}".`);return e}))}(n):yield R(n);const m=yield v(p.recordList),a=m.slice((u.getCurrentPage()-1)*u.getPageSize(),u.getCurrentPage()*u.getPageSize()),g=[];for(const e of a)g.push(M(e));return r.PageUtil.formPage(m.length,u.getCurrentPage(),u.getPageSize(),g)}))}getAdminList(r,o,i,t=l.RoleType.Member){return e(this,void 0,void 0,(function*(){return yield w(o),this.getMemberList(r,o,i,t)}))}};