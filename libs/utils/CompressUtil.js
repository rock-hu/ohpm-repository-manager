"use strict";var e=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(o,n){function s(e){try{c(r.next(e))}catch(e){n(e)}}function a(e){try{c(r.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CompressUtil=void 0;const i=require("./FsUtil"),r=t(require("path")),o=require("../packages/config/config"),n=t(require("compressing")),s=require("../common/RepoError"),a=require("../common"),c=t(require("tar")),l=/(\/\.\.\/)|(\.\.\/)|(\/\.\.)|(\.\.$)/gi;class d{static verifyFileBoom(t){return e(this,void 0,void 0,(function*(){const e=yield d.getFileStat(t),r=o.config.max_package_size*(1<<20),n=o.config.max_extract_size*(1<<20);if(e.size>r)throw new s.RepoClientError(a.ErrorCode.ExceedPackageSize,`The size of the OHPM package file exceeds "${o.config.max_package_size}"MB.`);let f=0,u=0;const p=i.FsUtil.createReadStream(t),h=c.default.list({onentry:e=>{if(f++,f>o.config.max_extract_file_num)throw new s.RepoClientError(a.ErrorCode.ExceedSubfileNum,`The subfile format of the OHPM package exceeds "${o.config.max_extract_file_num}".`);if(l.test(e.path))throw new s.RepoClientError(a.ErrorCode.InvalidFilePath,"The package contains subfiles whose names are invalid!");if("Directory"!==e.type&&(u+=void 0===e.size?0:e.size,u>n))throw new s.RepoClientError(a.ErrorCode.ExceedDecompressedPackageSize,`The size of the decompressed OHPM package file exceeds "${o.config.max_extract_size}"MB.`)}});p.pipe(h)}))}static sumFileNumAndSize(t){return e(this,void 0,void 0,(function*(){if(!t||!(yield i.FsUtil.exists(t)))return[0,0];const e=yield this.getFileStat(t);if(e.isFile())return[1,e.size];if(e.isDirectory()){let e=1,n=0;const c=yield i.FsUtil.readdir(t);for(const i of c){const c=r.default.join(t,i),[l,d]=yield this.sumFileNumAndSize(c);if(e+=l,n+=d,e>o.config.max_extract_file_num)throw new s.RepoClientError(a.ErrorCode.ExceedSubfileNum,`The subfile format of the OHPM package exceeds "${o.config.max_extract_file_num}".`);if(n>o.config.max_extract_size*(1<<20))throw new s.RepoClientError(a.ErrorCode.ExceedDecompressedPackageSize,`The size of the decompressed file exceeds "${o.config.max_extract_size}" MB.`)}return[e,n]}return[0,0]}))}static unCompress(t,i){return e(this,void 0,void 0,(function*(){const e=yield this.getFileType(t);try{"tgz"===e?yield n.default.tgz.uncompress(t,i):yield n.default.tar.uncompress(t,i)}catch(e){throw new s.RepoClientError(a.ErrorCode.UnCompressFailed,"Fail to unCompress file!",e)}}))}static getFileType(t){return e(this,void 0,void 0,(function*(){return(yield i.FsUtil.readFile(t)).toString("hex").substring(0,4).toUpperCase().startsWith("1F8B")?"tgz":"tar"}))}static getFileStat(t){return e(this,void 0,void 0,(function*(){try{return i.FsUtil.stat(t)}catch(e){throw new s.RepoClientError(a.ErrorCode.ReadFileError,`Fail to read file: ${t}!`,e)}}))}}exports.CompressUtil=d;