"use strict";var e=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,o){function r(e){try{l(s.next(e))}catch(e){o(e)}}function a(e){try{l(s.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}l((s=s.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.deCompressPkg=void 0;const i=t(require("path")),s=require("../../../../definitions"),n=require("../../../../../../utils/FsUtil"),o=t(require("compressing")),r=require("../../../../../../utils/CommonConstants"),a=require("../../../../../../common/Constants"),l=require("../../../../../../packages/log");function u(t,s,a,u){return e(this,void 0,void 0,(function*(){const e=i.default.basename(s).replace("+","/");try{l.OhpmLazyLogger.info(`Decompress the ${e} package.`),yield n.FsUtil.createDirIfNotExists(s),yield o.default.tgz.uncompress(t,s);const a=yield n.FsUtil.readdir(s);if(1===a.length&&a[0]!==r.PACKAGE){const e=i.default.join(s,a[0]);yield n.FsUtil.rename(e,i.default.join(s,r.PACKAGE))}}catch(t){const i=`Failed to decompress "${e}", ${t.message}.`;l.OhpmLazyLogger.error(i),u.push(i),a.push(e)}finally{(yield n.FsUtil.exists(t))&&(yield n.FsUtil.rm(t))}}))}exports.deCompressPkg=function(t,o){return e(this,void 0,void 0,(function*(){const e=i.default.join(t,s.PmDir),r=yield n.FsUtil.readdir(e),l=[],c=[];for(const t of r){const s=i.default.join(e,t);if(s.endsWith(a.Constants.TGZ_SUFFIX)&&(yield n.FsUtil.exists(s))){const n=i.default.join(e,t.replace(a.Constants.TGZ_SUFFIX,""));c.push(u(s,n,l,o))}}yield Promise.all(c)}))};