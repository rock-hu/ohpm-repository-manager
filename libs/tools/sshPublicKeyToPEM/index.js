"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.sshPublicKeyToPEM=void 0;const t=e(require("node-forge"));function r(e,t){const r=function(e,t){if(void 0===e)throw new Error("missing buffer");if(void 0===t)throw new Error("missing offset");if(t+3>=e.length)throw new Error("trying to read beyond buffer length");return function(e,t){let r=0;return r=e[t+1]<<16,r|=e[t+2]<<8,r|=e[t+3],r+=e[t]<<24>>>0,r}(e,t)}(e,t),s=(t+=4)+r;return{data:e.subarray(t,s),offset:s}}function s(e){let s,o,n,a,i,f=0;try{if(s=Buffer.from(e.split(" ")[1],"base64"),i=r(s,f),a=i.data.toString(),f=i.offset,"ssh-rsa"!==a)throw new Error(`invalid ssh key type: ${a}`);i=r(s,f),o=i.data,f=i.offset,i=r(s,f),n=i.data}catch(t){throw new Error(`invalid ssh key: ${e}`)}const u=function(e,r){const{asn1:s,pki:o,util:n}=t.default;return s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.OID,!1,s.oidToDer(o.oids.rsaEncryption).getBytes()),s.create(s.Class.UNIVERSAL,s.Type.NULL,!1,"")]),s.create(s.Class.UNIVERSAL,s.Type.BITSTRING,!1,[s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,new n.ByteStringBuffer(e).getBytes()),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,new n.ByteStringBuffer(r).getBytes())])])])}(n,o),l=t.default.asn1.toDer(u),E=t.default.pki.publicKeyFromAsn1(t.default.asn1.fromDer(l));return t.default.pki.publicKeyToPem(E)}exports.sshPublicKeyToPEM=function(e){if(/^ssh-rsa.*/.test(e))return s(e);throw new Error("only RSA public keys are allowed")};