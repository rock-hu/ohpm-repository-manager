"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.RepoResponse=void 0;const r=require("../packages/log"),e=require("./ErrorCode");exports.RepoResponse=class{static ok(r){return this.success(r)}static success(e,s){if(e.destroyed)return void r.OhpmLazyLogger.error(`cannot response for url:${e.req.url}, connection already destroyed.`);const o={code:200,message:"success",data:s};e.status(200).json(o)}static successForCli(e,s){e.destroyed?r.OhpmLazyLogger.error(`cannot response for url:${e.req.url}, connection already destroyed.`):e.status(200).json(s)}static denied(r,s){return this.fail(r,403,this.getErrorReason(e.ErrorCode.AccessDenied,s))}static unauthorized(r,s){return this.fail(r,401,this.getErrorReason(e.ErrorCode.Unauthorized,s))}static notFound(r,s){return this.fail(r,404,this.getErrorReason(e.ErrorCode.NotFound,s))}static notAllowed(r,s){return this.fail(r,405,this.getErrorReason(e.ErrorCode.NotAllowed,s))}static systemError(r,s){return this.fail(r,500,this.getErrorReason(e.ErrorCode.UnexpectedError,s))}static fail(e,s,o){e.destroyed?r.OhpmLazyLogger.error(`cannot response for url:${e.req.url}, connection already destroyed.`):e.status(s).json(o)}static getErrorReason(r,s){const o={code:r,message:e.MESSAGE_CN[r]};return s&&(o.message=s),o}};