"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ValidationConfigChecker=void 0;const e=require("./types"),r=require("../../../common/RepoError"),o=require("../../../common"),i=require("../../../packages/log");class t{static checkConfig(e){if(!e.attrName)throw new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,'field "attrName" is empty');const n=e.configs;if(!Array.isArray(n)){const t=`check rule of "${e.attrName}" - typeof "configs" is not array`;throw i.OhpmLazyLogger.error(t),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,t)}n.forEach((e=>{t.checkRuleConfig(e)}))}static checkRuleConfig(e){const t=this.ruleTypeCheckerMap.get(e.ruleType);if(!t)throw i.OhpmLazyLogger.error(`invalid RuleType: "${e.ruleType}".`),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,"Invalid RuleType");t(e.ruleContent)}static regExpTypeCheck(e){try{new RegExp(e)}catch(t){throw i.OhpmLazyLogger.error(`fail to check ruleContent. Invalid RegExpRule: "${e}".`),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,"Invalid RegExp",t)}}static whiteListTypeCheck(e){if("string"!=typeof e||!/^([a-zA-Z_]+;)*([a-zA-Z_]+)?$/.test(e))throw i.OhpmLazyLogger.error(`fail to check ruleContent. Invalid WhiteListRule: "${e}"`),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,"Invalid WhiteList")}static lengthLimitTypeCheck(e){if(e.maxLength<0&&e.minLength<0)throw i.OhpmLazyLogger.error(`fail to check ruleContent. Invalid LengthLimitRule: "${e}"`),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,"Invalid ItemLengthLimitRule")}static notNullTypeCheck(e){if(e)throw i.OhpmLazyLogger.error(`fail to check ruleContent. Invalid NotNullRule: "${e}"`),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,"Invalid NotNullRule")}static MapEntryTypeCheck(e){const r=e.keyRuleConfig,o=e.valueRuleConfig;t.checkRuleConfig(r),t.checkRuleConfig(o)}static CustomFunctionCheck(e){if("string"!=typeof e)throw i.OhpmLazyLogger.error(`fail to check ruleContent. Invalid CustomFunctionRule: "${e}"`),new r.RepoServerError(o.ErrorCode.InvalidValidationConfig,"Invalid CustomFunction")}}exports.ValidationConfigChecker=t,t.ruleTypeCheckerMap=new Map([[e.ValidationRuleType.RegExp,t.regExpTypeCheck],[e.ValidationRuleType.NotNull,t.notNullTypeCheck],[e.ValidationRuleType.WhiteList,t.whiteListTypeCheck],[e.ValidationRuleType.LengthLimit,t.lengthLimitTypeCheck],[e.ValidationRuleType.ListItemLengthLimit,t.lengthLimitTypeCheck],[e.ValidationRuleType.MapEntry,t.MapEntryTypeCheck],[e.ValidationRuleType.CustomFunction,t.CustomFunctionCheck]]);