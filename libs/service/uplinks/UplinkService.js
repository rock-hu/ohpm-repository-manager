"use strict";var e=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(o,n){function l(e){try{d(i.next(e))}catch(e){n(e)}}function p(e){try{d(i.throw(e))}catch(e){n(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(l,p)}d((i=i.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.uplinkService=void 0;const r=require("../../common/CommonValidator"),i=require("../repo/RepoRepository"),o=require("./UplinkRepository"),n=require("../../entity/Uplink"),l=require("../../common/RepoError"),p=require("../../common"),d=require("./uplink-proxy/UplinkProxyService"),a=t(require("node-fetch")),s=require("../../packages/log"),u=require("../../utils/CommonUtil"),c=require("../../packages/config/config");function g(t){return e(this,void 0,void 0,(function*(){const e=u.CommonUtil.contactUrl(t,"-/ping");try{return(yield(0,a.default)(e,{agent:yield d.uplinkProxyService.getProxyAgent(t),timeout:1e3*c.config.fetch_timeout,redirect:"error"})).ok}catch(e){throw s.OhpmLazyLogger.warn("fail to check ohpm registry",e.message),new l.RepoClientError(p.ErrorCode.NetworkError,`Network connection error, when fetch ${t} , ${e.message}`)}}))}exports.uplinkService=new class{getUplinkList(){return e(this,void 0,void 0,(function*(){return(yield o.uplinkRepository.getList()).recordList}))}addUplink(t,r){return e(this,void 0,void 0,(function*(){const e=yield o.uplinkRepository.getList();if(e&&e.total>=5)throw new l.RepoClientError(p.ErrorCode.ExceedLimit,"The number of uplinks cannot exceed 5.");const i=yield o.uplinkRepository.getList({name:r.getName()});if(i&&i.total>0)throw new l.RepoClientError(p.ErrorCode.DuplicateName,`Duplicate name: ${r.getName()}.`);if(!(yield g(r.getUrl())))throw new l.RepoClientError(p.ErrorCode.InvalidUplinkUrl,`Invalid ohpm registry url: ${r.getUrl()}.`);r.initBaseDate(t),yield o.uplinkRepository.insert(r),s.OhpmLazyLogger.info("insert uplink success:",`uplink's id is ${r.getId()}, operator is ${r.getUpdatedBy()}.`)}))}updateUplink(t,d){return e(this,void 0,void 0,(function*(){r.CommonValidator.checkUUID(d.getId());let e=yield o.uplinkRepository.findById(d.getId());if(!e)throw new l.RepoClientError(p.ErrorCode.UplinkNotFound,`Can't find uplink which id is ${d.getId()}.`);if(e=new n.Uplink(e),e.getName()!==d.getName()){const t=yield i.repoRepository.getList();if(t&&t.total>0&&t.recordList[0].uplink===e.getName())throw new l.RepoClientError(p.ErrorCode.UplinkReferenced,`The uplink: ${e.getName()} have been referenced, so that the name field cannot be modified.`);const r=yield o.uplinkRepository.getList({name:d.getName()});if(r&&r.total>0)throw new l.RepoClientError(p.ErrorCode.DuplicateName,`Duplicate name: ${d.getName()}.`)}if(e.getUrl()!==d.getUrl()&&!(yield g(d.getUrl())))throw new l.RepoClientError(p.ErrorCode.InvalidUplinkUrl,`Invalid ohpm registry url: ${d.getUrl()}.`);e.setName(d.getName()),e.setDescription(d.getDescription()),e.setUrl(d.getUrl()),e.updateBaseDate(t),yield o.uplinkRepository.updateById(e),s.OhpmLazyLogger.info("update uplink success:",`uplink's id is ${e.getId()}, operator is ${e.getUpdatedBy()}.`)}))}deleteUplink(t){return e(this,void 0,void 0,(function*(){r.CommonValidator.checkUUID(t);let e=yield o.uplinkRepository.findById(t);if(!e)throw new l.RepoClientError(p.ErrorCode.DeleteUplinkError,`The uplink whose id is "${t}" have been deleted, so that you cannot delete it.`);e=new n.Uplink(e);const d=yield i.repoRepository.getList();if(d&&d.total>0&&d.recordList[0].uplink===e.getName())throw new l.RepoClientError(p.ErrorCode.ForbidDeleteUplink,`The uplink: ${e.getName()} have been referenced, so that you cannot delete it.`);yield o.uplinkRepository.deletedById(t),s.OhpmLazyLogger.info("delete uplink success:",`uplink's id is ${t}, operator is ${e.getUpdatedBy()}.`)}))}};