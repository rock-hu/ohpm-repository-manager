"use strict";var e=this&&this.__createBinding||(Object.create?function(e,i,t,r){void 0===r&&(r=t);var n=Object.getOwnPropertyDescriptor(i,t);n&&!("get"in n?!i.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return i[t]}}),Object.defineProperty(e,r,n)}:function(e,i,t,r){void 0===r&&(r=t),e[r]=i[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,i){Object.defineProperty(e,"default",{enumerable:!0,value:i})}:function(e,i){e.default=i}),t=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&e(r,t,n);return i(r,t),r},r=this&&this.__awaiter||function(e,i,t,r){return new(t||(t=Promise))((function(n,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function d(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var i;e.done?n(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(s,d)}c((r=r.apply(e,i||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.uplinkController=void 0;const n=t(require("express")),o=require("../../common"),s=require("./UplinkService"),d=require("../../entity/Uplink"),c=require("../user/UserService"),u=require("../../packages/log"),a=require("../adminAuditLog/AdminAuditLogService"),p=require("../../common/OperateType"),l=require("../../common/RepoResponse");exports.uplinkController=new class{constructor(){this.basePath="/api/uplinks",this.router=n.Router(),this.initRouter()}initRouter(){this.router.get("",o.SessionUtil.check,o.CsrfToken.validate,this.getUplinkList),this.router.post("",o.SessionUtil.check,o.CsrfToken.validate,this.addUplink),this.router.put("/:id",o.SessionUtil.check,o.CsrfToken.validate,this.updateUplink),this.router.delete("/:id",o.SessionUtil.check,o.CsrfToken.validate,this.deleteUplink)}getUplinkList(e,i,t){return r(this,void 0,void 0,(function*(){try{yield c.userService.checkUserIsAdmin(e.ctx.userId);const t=yield s.uplinkService.getUplinkList();l.RepoResponse.success(i,t)}catch(e){t(e)}}))}addUplink(e,i,t){return r(this,void 0,void 0,(function*(){try{yield c.userService.checkUserIsAdmin(e.ctx.userId);const t=new d.Uplink(e.body);yield s.uplinkService.addUplink(e.ctx.userId,t);const r=u.OhpmLazyLogger.operateSuccess(e,"addUplink");l.RepoResponse.ok(i),yield a.adminAuditLogService.addSuccessLog(e.ctx.userId,p.OperateType.addUplink,r)}catch(i){u.OhpmLazyLogger.operateFailure(e,"addUplink"),yield a.adminAuditLogService.addFailureLog(e.ctx.userId,p.OperateType.addUplink,i.message),t(i)}}))}updateUplink(e,i,t){return r(this,void 0,void 0,(function*(){try{yield c.userService.checkUserIsAdmin(e.ctx.userId);const t=new d.Uplink(e.body);t.setId(e.params.id),yield s.uplinkService.updateUplink(e.ctx.userId,t);const r=u.OhpmLazyLogger.operateSuccess(e,"updateUplink");l.RepoResponse.ok(i),yield a.adminAuditLogService.addSuccessLog(e.ctx.userId,p.OperateType.updateUplink,r)}catch(i){u.OhpmLazyLogger.operateFailure(e,"updateUplink"),yield a.adminAuditLogService.addFailureLog(e.ctx.userId,p.OperateType.updateUplink,i.message),t(i)}}))}deleteUplink(e,i,t){return r(this,void 0,void 0,(function*(){try{yield c.userService.checkUserIsAdmin(e.ctx.userId),yield s.uplinkService.deleteUplink(e.params.id);const t=u.OhpmLazyLogger.operateSuccess(e,"deleteUplink");l.RepoResponse.ok(i),yield a.adminAuditLogService.addSuccessLog(e.ctx.userId,p.OperateType.deleteUplink,t)}catch(i){u.OhpmLazyLogger.operateFailure(e,"deleteUplink"),yield a.adminAuditLogService.addFailureLog(e.ctx.userId,p.OperateType.deleteUplink,i.message),t(i)}}))}};