"use strict";var e=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(o,n){function a(e){try{l(r.next(e))}catch(e){n(e)}}function s(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.uplinkStorage=void 0;const i=t(require("path")),r=require("../../../utils/FsUtil"),o=require("../../../packages/log"),n=require("../../../packages/config/config"),a=require("../../../common/Constants"),s=require("../../../common/RepoError"),l=require("../../../common");exports.uplinkStorage=new class{init(){return e(this,void 0,void 0,(function*(){const e=n.config.uplink_cache_path;if(!e)throw new s.RepoServerError(l.ErrorCode.InvalidUplinkStorePath,'Config "uplink_cache_path" is empty.');if(e.includes(".."))throw new s.RepoServerError(l.ErrorCode.InvalidUplinkStorePath,'"uplink_cache_path" is configured wrong: The relative path cannot contain "..".');this.baseDir=i.default.resolve(a.Constants.DATA_DIR,e);try{yield r.FsUtil.createDirIfNotExists(this.baseDir),yield r.FsUtil.chmod(this.baseDir,488),o.OhpmLazyLogger.debug("initialize uplinkStorage successfully.")}catch(e){throw o.OhpmLazyLogger.error(`"uplink_cache_path" is configured wrong, please set the parameters correctly. error: ${e}`),new Error('"uplink_cache_path" is configured wrong')}}))}download(t,n,a){return e(this,void 0,void 0,(function*(){const e=`${n}-${a}.har`;let s;s=t?i.default.join(t,n,e):i.default.join(n,e);const l=i.default.join(this.baseDir,s);if(yield r.FsUtil.exists(l))return o.OhpmLazyLogger.info("uplinkStorage: Obtaining the download address succeeded,",`relative path: ${s}.`),l;o.OhpmLazyLogger.info("uplinkStorage: the file does not exist,",`relative path: ${s}.`)}))}save(t,n,a){return e(this,void 0,void 0,(function*(){let e;e=n.startsWith("@")?i.default.join(this.baseDir,n.split("/")[0],n.split("/")[1]):i.default.join(this.baseDir,n),yield r.FsUtil.createDirIfNotExists(e),yield r.FsUtil.chmod(e,488);const s=i.default.join(e,a);return yield r.FsUtil.writeFile(s,t,{mode:416}),o.OhpmLazyLogger.info("save uplink file success."),s}))}};