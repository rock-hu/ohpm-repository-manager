"use strict";var t=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),e=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||function(r){if(r&&r.__esModule)return r;var n={};if(null!=r)for(var i in r)"default"!==i&&Object.prototype.hasOwnProperty.call(r,i)&&t(n,r,i);return e(n,r),n};Object.defineProperty(exports,"__esModule",{value:!0}),exports.isValidHexStrKey=exports.genSecureRandomByte=exports.stripCryptHead=exports.isKeyLengthValid=exports.hexStr2Byte=exports.byte2HexStr=void 0;const n=r(require("node:crypto")),i=require("./constants"),o=require("./CommonUtil");function s(t){const e=t.length;if(0!=(1&e))return null;let r=!1;const n=[];let i=0;for(;i<e;){let e=u(t.charAt(i));if(null===e){r=!0;break}e<<=4,i++;const o=u(t.charAt(i));if(null===o){r=!0;break}e|=o,(255&e)>127?n.push((255&e)-256):n.push(255&e),i++}return r?null:new Int8Array(n)}function u(t){const e=parseInt(t,16);return!isNaN(e)?e:null}exports.byte2HexStr=function(t,e){const r=e?i.DIGITS_LOWER:i.DIGITS_UPPER,n=t.length,o=[];for(let e=0;e<n;e++)o.push(r[(240&t[e])>>>4]),o.push(r[15&t[e]]);return o.join("")},exports.hexStr2Byte=s,exports.isKeyLengthValid=function(t){return t&&(0,o.isValidStr)(t)?t.length>=2*i.KEY_MIN_VALID_LENGTH:!!(0,o.isValidArr)(Array.from(t))&&t.length>=i.KEY_MIN_VALID_LENGTH},exports.stripCryptHead=function(t){if((0,o.isValidStr)(t)){const e=t;return-1===e.indexOf(i.KEY_HEAD)?null:e.substring(i.KEY_HEAD.length)}{const e=t;if((0,o.isValidArr)(Array.from(e))){const t=i.DEFAULT_DECODER.decode(e);if(t.startsWith(i.KEY_HEAD)&&t.length>i.KEY_HEAD.length)return e.slice(i.KEY_HEAD.length)}return null}},exports.genSecureRandomByte=function(t){const e=n.randomBytes(t);return new Int8Array(e)},exports.isValidHexStrKey=function(t,e=i.KEY_128BIT_SIZE){if(t&&(0,o.isValidStr)(t)){const r=s(t);if(r)return r.length>=e}return!1};