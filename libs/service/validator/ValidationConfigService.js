"use strict";var e=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ValidationConfigService=void 0;const t=require("./repository"),o=require("./rule"),r=require("../../entity/ValidationConfigEntity"),n=require("./rule/ValidationConfigChecker"),i=require("../../common/RepoError"),a=require("../../common"),s=require("../../packages/log"),u=require("../../common/ErrorCode"),c=require("../../utils/CommonConstants"),l=/\S/;class C{static getInstance(){return this.Instance||(this.Instance=new C(t.ValidationConfigDBRepository.getInstance())),this.Instance}constructor(e){this.repository=e}saveConfigs(t){return e(this,void 0,void 0,(function*(){t.forEach((e=>n.ValidationConfigChecker.checkConfig(e)));const e=[];t.forEach((t=>{e.push(new r.ValidationConfigEntity(t))})),this.repository.saveConfigs(e)}))}getConfigs(){return e(this,void 0,void 0,(function*(){const e=yield this.repository.findAllConfigs(),t=[];return e.forEach((e=>{t.push(e.toValidationConfig())})),t}))}checkConfigs(t){return e(this,void 0,void 0,(function*(){t.forEach((e=>{e.configs.forEach((t=>{this.checkRuleContentNotAllSpaceExpectNotNullType(t,e),this.reSetRuleContentForRegExp(t,e)}))}))}))}checkRuleContentNotAllSpaceExpectNotNullType(e,t){if(e.ruleType!==o.ValidationRuleType.NotNull&&"string"==typeof e.ruleContent&&!l.test(e.ruleContent))throw new i.RepoClientError(a.ErrorCode.AddCheckRuleError,`ruleContent is only composed of spaces in ruleName: "${t.attrName}".`,null,{messageCN:(0,s.format)(u.MESSAGE_CN[a.ErrorCode.AddCheckRuleError],{attrName:t.attrName})})}reSetRuleContentForRegExp(e,t){if(e.ruleType===o.ValidationRuleType.RegExp){if("name"!==t.attrName||"name must contain group"!==e.ruleContent)throw new i.RepoClientError(a.ErrorCode.AddCheckRuleError,`when ruleType is set to RegEx, the entered value of ruleContent is incorrect, ruleContent: "${e.ruleContent}".`,null,{messageCN:(0,s.format)(u.MESSAGE_CN[a.ErrorCode.AddCheckRuleError],{attrName:t.attrName})});e.ruleContent=c.NAME_CONTAIN_GROUP_REGEX}}}exports.ValidationConfigService=C;