"use strict";var e=this&&this.__awaiter||function(e,r,t,o){return new(t||(t=Promise))((function(i,n){function d(e){try{s(o.next(e))}catch(e){n(e)}}function u(e){try{s(o.throw(e))}catch(e){n(e)}}function s(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(d,u)}s((o=o.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.adminAuditLogRepository=void 0;const r=require("../../common/DbFactory"),t=require("../../common/RepoError"),o=require("../../common"),i=require("../../packages/definitions/types");exports.adminAuditLogRepository=new class{constructor(){this.TABLE_NAME="adminAuditLog"}insert(i){return e(this,void 0,void 0,(function*(){try{return r.commonDB.insertOne(this.TABLE_NAME,i,!0)}catch(e){throw new t.RepoServerError(o.ErrorCode.SaveAdminAuditLogError,"Fail to insert AdminAuditLog!",e)}}))}deleteByRangeTime(i,n){return e(this,void 0,void 0,(function*(){try{return r.commonDB.deleteByRangeKey(this.TABLE_NAME,"operationTime",i,n)}catch(e){throw new t.RepoServerError(o.ErrorCode.SaveAdminAuditLogError,"fail to delete outdated AdminAuditLog!",e)}}))}getAuditLogListByFilter(n,d,u){return e(this,void 0,void 0,(function*(){const e={orderBy:{keyList:["operationTime"],orderList:[i.OrderType.DESC]},pageQuery:{pageNum:n,pageSize:d},filter:Object.assign({},u)};try{return r.commonDB.findByFilter(this.TABLE_NAME,e)}catch(e){throw new t.RepoServerError(o.ErrorCode.FindAdminAuditLogListError,"fail to get adminAuditLogList",e)}}))}};