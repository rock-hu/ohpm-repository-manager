"use strict";var r=this&&this.__awaiter||function(r,e,i,o){return new(i||(i=Promise))((function(t,n){function s(r){try{u(o.next(r))}catch(r){n(r)}}function d(r){try{u(o.throw(r))}catch(r){n(r)}}function u(r){var e;r.done?t(r.value):(e=r.value,e instanceof i?e:new i((function(r){r(e)}))).then(s,d)}u((o=o.apply(r,e||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.userRepository=void 0;const e=require("../../common/DbFactory"),i=require("../../packages/definitions/types"),o=require("../../common/RepoError"),t=require("../../common");exports.userRepository=new class{constructor(){this.TABLE_NAME="user"}insert(i){return r(this,void 0,void 0,(function*(){try{return e.commonDB.insertOne(this.TABLE_NAME,i)}catch(r){throw new o.RepoServerError(t.ErrorCode.SaveUserError,"Fail to insert user!",r)}}))}findByFilter(n,s){return r(this,void 0,void 0,(function*(){try{return e.commonDB.findByFilter(this.TABLE_NAME,{filter:{},pick:["id","name","role","createTime","publishId"],orderBy:{keyList:["role","name"],orderList:[i.OrderType.DESC,i.OrderType.ASC]},pageQuery:{pageNum:n,pageSize:s}})}catch(r){throw new o.RepoServerError(t.ErrorCode.FindUserListError,"Fail to find userList!",r)}}))}findPickUserById(i){return r(this,void 0,void 0,(function*(){try{return e.commonDB.findByFilter(this.TABLE_NAME,{filter:{id:i},pick:["id","name","role","createTime","publishId","needChangePassword"]})}catch(r){throw new o.RepoServerError(t.ErrorCode.FindUserError,`Fail to find user whose id is ${i}!`,r)}}))}findUserById(i){return r(this,void 0,void 0,(function*(){try{return e.commonDB.findById(this.TABLE_NAME,i)}catch(r){throw new o.RepoServerError(t.ErrorCode.FindUserError,`Fail to find user whose id is ${i}!`,r)}}))}findUserByName(i){return r(this,void 0,void 0,(function*(){try{return e.commonDB.findByFilter(this.TABLE_NAME,{filter:{name:i}})}catch(r){throw new o.RepoServerError(t.ErrorCode.FindUserListError,`Fail to find user whose userName is ${i}!`,r)}}))}deleteById(i){return r(this,void 0,void 0,(function*(){try{return e.commonDB.deleteById(this.TABLE_NAME,i)}catch(r){throw new o.RepoServerError(t.ErrorCode.DeleteUserError,`Fail to delete user whose id is ${i}!`,r)}}))}updateById(i,n){return r(this,void 0,void 0,(function*(){try{return e.commonDB.updateById(this.TABLE_NAME,i,n)}catch(r){throw new o.RepoServerError(t.ErrorCode.UpdateUserError,`Fail to update user whose id is ${i}!`,r)}}))}findByPublishId(i){return r(this,void 0,void 0,(function*(){try{return e.commonDB.findByFilter(this.TABLE_NAME,{filter:{publishId:i},pick:["id","name","role","createTime","publishId"]})}catch(r){throw new o.RepoServerError(t.ErrorCode.FindUserError,`Fail to find user whose publishId is ${i}!`,r)}}))}getUserListByFilter(n,s,d){return r(this,void 0,void 0,(function*(){const r={orderBy:{keyList:["createTime"],orderList:[i.OrderType.DESC]},pageQuery:{pageNum:n,pageSize:s},filter:Object.assign({},d),pick:["role","id","name","publishId","createTime"]};try{return e.commonDB.findByFilter(this.TABLE_NAME,r)}catch(r){throw new o.RepoServerError(t.ErrorCode.FindAdminAuditLogListError,"fail to get userList",r)}}))}};