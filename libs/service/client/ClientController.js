"use strict";var e=this&&this.__awaiter||function(e,r,a,o){return new(a||(a=Promise))((function(t,s){function i(e){try{g(o.next(e))}catch(e){s(e)}}function n(e){try{g(o.throw(e))}catch(e){s(e)}}function g(e){var r;e.done?t(e.value):(r=e.value,r instanceof a?r:new a((function(e){e(r)}))).then(i,n)}g((o=o.apply(e,r||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.clientController=void 0;const a=require("../../utils/CommonConstants"),o=r(require("express")),t=require("../../packages/log"),s=require("../../utils/CommonUtil"),i=require("./login/SignatureRequestBody"),n=require("./login/ClientAuthService"),g=require("../../common"),p=require("./login/OhUserInfo"),c=require("./publish/PublishService"),u=require("./publish/PublishStreamService"),d=require("./unpublish/UnPublishService"),l=require("../uplinks/uplink-storage/UplinkStorageService"),m=require("../adminAuditLog/AdminAuditLogService"),h=require("../../common/OperateType"),y=require("../downloadFailure/DownloadFailureService"),R=require("../../common/RepoResponse"),L=require("../../packages/config/config"),S=require("../../common/DbAndStoreType"),v=require("./dist-tags/DistTagsService"),T=r(require("semver")),f=r(require("../../tools/formdataUpload")),_=r(require("path")),O=require("../../common/Constants"),E=require("../repo/FileInfo"),b=require("../../common/RepoError"),k=require("./install/InstallService");exports.clientController=new class{constructor(){this.basePath="/repos",this.router=o.default.Router(),this.upload=(0,f.default)({dest:_.default.join(O.Constants.DATA_DIR,"temp","uploads")}),this.installService=k.InstallService.getInstance(),this.distTagsService=v.DistTagsService.getInstance(),this.searchMetaByPackageName=this.installService.searchMetaByPackageName,this.initRouter()}initRouter(){this.router.get(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/-/ping`,this.ping),this.router.post(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/login`,this.verifySignature.bind(this)),this.router.put(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/:packageName`,g.SessionUtil.clientCheck,this.publish.bind(this)),this.router.post(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/stream/:packageName`,g.SessionUtil.clientCheck,this.upload.single("pkg_stream"),this.publishByStream.bind(this)),this.router.get(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/:group?/:packageName`,this.metadata.bind(this)),this.router.delete(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/:packageName`,g.SessionUtil.clientCheck,this.unPublish.bind(this)),this.router.post(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/-/package/:packageName/dist-tags/:tag`,g.SessionUtil.clientCheck,this.addTag.bind(this)),this.router.put(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/-/package/:packageName/dist-tags/:tag`,g.SessionUtil.clientCheck,this.updateTag.bind(this)),this.router.delete(`/:repoName(${a.REPO_NAME_PATH_VAR_REGEX_STR})/-/package/:packageName/dist-tags/:tag`,g.SessionUtil.clientCheck,this.deleteTag.bind(this))}ping(e,r,a){try{R.RepoResponse.ok(r)}catch(e){a(e)}}verifySignature(r,a){return e(this,void 0,void 0,(function*(){const e=r.body;try{const o=new i.SignatureRequestBody(e),[s,g]=yield n.clientAuthService.verifySignature(o);t.OhpmLazyLogger.operateSuccess(r,"login",g.getId()),R.RepoResponse.successForCli(a,{success:!0,token:s})}catch(o){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(o)}, message: ${o.message}`),t.OhpmLazyLogger.operateFailure(r,"login",e.publishId),R.RepoResponse.fail(a,400,{success:!1,error:o.message})}}))}publishByStream(r,a){return e(this,void 0,void 0,(function*(){const e=r.body,o=new p.OhUserInfo(r.ctx.userJson),i=r.params.repoName,n=r.params.packageName,g=new E.FileInfo(r.pkg_stream);try{yield u.publishStreamService.publish(i,n,o,{metadata:e.metadata,pkg_stream:g});const p=t.OhpmLazyLogger.operateSuccess(r,"publish",o.getId());R.RepoResponse.ok(a),yield m.adminAuditLogService.addSuccessLog(o.getId(),h.OperateType.publish,p)}catch(e){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(e)}, message: ${e.message}.`),t.OhpmLazyLogger.operateFailure(r,"publishByStream",o.getId());const i=e instanceof b.RepoRetryError?e.status:400;R.RepoResponse.fail(a,i,{success:!1,error:e.message}),yield m.adminAuditLogService.addFailureLog(o.getId(),h.OperateType.publish,e.message)}finally{yield s.CommonUtil.fsrm(g.path)}}))}publish(r,a){return e(this,void 0,void 0,(function*(){const e=r.body,o=new p.OhUserInfo(r.ctx.userJson),i=r.params.repoName,n=r.params.packageName;try{yield c.publishService.publish(i,n,o,e);const s=t.OhpmLazyLogger.operateSuccess(r,"publish",o.getId());R.RepoResponse.ok(a),yield m.adminAuditLogService.addSuccessLog(o.getId(),h.OperateType.publish,s)}catch(e){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(e)}, message: ${e.message}`),t.OhpmLazyLogger.operateFailure(r,"publish",o.getId());const i=e instanceof b.RepoRetryError?e.status:400;R.RepoResponse.fail(a,i,{success:!1,error:e.message}),yield m.adminAuditLogService.addFailureLog(o.getId(),h.OperateType.publish,e.message)}}))}metadata(r,o){return e(this,void 0,void 0,(function*(){const e=r.params.repoName,i=r.params.group?`${r.params.group}/${r.params.packageName}`:r.params.packageName;let n,g=L.config.store.config.server;g||(g=`${r.protocol}://${r.get("host")}`);try{if(!a.NPM_PACKAGE_NAME_REGEX.test(i))return t.OhpmLazyLogger.error("invalid packageName."),void R.RepoResponse.notFound(o,"Invalid packageName");if(n=yield this.searchMetaByPackageName(e,i,g),n){const r=yield this.distTagsService.getMetadataDistTags(e,i),a=Object.keys(n.versions),o=T.default.maxSatisfying(a,"*")||T.default.maxSatisfying(a,"*",{includePrerelease:!0,loose:!0});n["dist-tags"]=Object.assign({latest:o},r)}else n=yield l.uplinkStorageService.getMetadataFromUplink(e,i,g);if(!n)return t.OhpmLazyLogger.error(`package not found: ${i}.`),void R.RepoResponse.notFound(o,`package not found: ${i}`);R.RepoResponse.successForCli(o,n)}catch(a){const p=`Error throw location: ${s.CommonUtil.getErrorThrowLocation(a)}, message: ${a.message}`;if(t.OhpmLazyLogger.error(p),R.RepoResponse.notFound(o,p),L.config.store.type!==S.StorageType.Sftp){const a=r.get("host").split(":"),o=g+r.originalUrl,t=n?Object.keys(n.versions)[0]:"";yield y.downloadFailureService.addDownloadFailure(e,i,t,a[0],a[1],o,p)}}}))}unPublish(r,a){return e(this,void 0,void 0,(function*(){const e=new p.OhUserInfo(r.ctx.userJson),o=r.params.repoName,i=r.params.packageName,n=r.body.version;try{yield d.unPublishService.unPublish(o,i,n,e);const s=t.OhpmLazyLogger.operateSuccess(r,"unPublish",e.getId());R.RepoResponse.ok(a),yield m.adminAuditLogService.addSuccessLog(e.getId(),h.OperateType.unPublish,s)}catch(o){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(o)}, message: ${o.message}`),t.OhpmLazyLogger.operateFailure(r,"unPublish",e.getId()),R.RepoResponse.fail(a,400,{success:!1,error:o.message}),yield m.adminAuditLogService.addFailureLog(e.getId(),h.OperateType.unPublish,o.message)}}))}addTag(r,a){return e(this,void 0,void 0,(function*(){const e=new p.OhUserInfo(r.ctx.userJson),o=r.params.repoName,i=r.params.packageName,n=r.params.tag,g=r.body.version;try{yield this.distTagsService.addTag(e,o,i,n,g);const s=t.OhpmLazyLogger.operateSuccess(r,"addTag",e.getId());R.RepoResponse.ok(a),yield m.adminAuditLogService.addSuccessLog(e.getId(),h.OperateType.addTag,s)}catch(o){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(o)}, message: ${o.message}`),t.OhpmLazyLogger.operateFailure(r,"addTag",e.getId()),R.RepoResponse.fail(a,400,{success:!1,error:o.message}),yield m.adminAuditLogService.addFailureLog(e.getId(),h.OperateType.addTag,o.message)}}))}updateTag(r,a){return e(this,void 0,void 0,(function*(){const e=new p.OhUserInfo(r.ctx.userJson),o=r.params.repoName,i=r.params.packageName,n=r.params.tag,g=r.body.version;try{yield this.distTagsService.updateTag(e,o,i,n,g);const s=t.OhpmLazyLogger.operateSuccess(r,"updateTag",e.getId());R.RepoResponse.ok(a),yield m.adminAuditLogService.addSuccessLog(e.getId(),h.OperateType.updateTag,s)}catch(o){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(o)}, message: ${o.message}`),t.OhpmLazyLogger.operateFailure(r,"updateTag",e.getId()),R.RepoResponse.fail(a,400,{success:!1,error:o.message}),yield m.adminAuditLogService.addFailureLog(e.getId(),h.OperateType.updateTag,o.message)}}))}deleteTag(r,a){return e(this,void 0,void 0,(function*(){const e=new p.OhUserInfo(r.ctx.userJson),o=r.params.repoName,i=r.params.packageName,n=r.params.tag;try{yield this.distTagsService.deleteTag(e,o,i,n);const s=t.OhpmLazyLogger.operateSuccess(r,"deleteTag",e.getId());R.RepoResponse.ok(a),yield m.adminAuditLogService.addSuccessLog(e.getId(),h.OperateType.deleteTag,s)}catch(o){t.OhpmLazyLogger.error(`error throw location: ${s.CommonUtil.getErrorThrowLocation(o)}, message: ${o.message}`),t.OhpmLazyLogger.operateFailure(r,"deleteTag",e.getId()),R.RepoResponse.fail(a,400,{success:!1,error:o.message}),yield m.adminAuditLogService.addFailureLog(e.getId(),h.OperateType.deleteTag,o.message)}}))}};