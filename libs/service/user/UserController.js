"use strict";var e=this&&this.__createBinding||(Object.create?function(e,r,s,o){void 0===o&&(o=s);var t=Object.getOwnPropertyDescriptor(r,s);t&&!("get"in t?!r.__esModule:t.writable||t.configurable)||(t={enumerable:!0,get:function(){return r[s]}}),Object.defineProperty(e,o,t)}:function(e,r,s,o){void 0===o&&(o=s),e[o]=r[s]}),r=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),s=this&&this.__importStar||function(s){if(s&&s.__esModule)return s;var o={};if(null!=s)for(var t in s)"default"!==t&&Object.prototype.hasOwnProperty.call(s,t)&&e(o,s,t);return r(o,s),o},o=this&&this.__awaiter||function(e,r,s,o){return new(s||(s=Promise))((function(t,i){function a(e){try{n(o.next(e))}catch(e){i(e)}}function d(e){try{n(o.throw(e))}catch(e){i(e)}}function n(e){var r;e.done?t(e.value):(r=e.value,r instanceof s?r:new s((function(e){e(r)}))).then(a,d)}n((o=o.apply(e,r||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.userController=void 0;const t=s(require("express")),i=require("../../common"),a=require("./UserService"),d=require("../../common/RepoError"),n=require("../../entity/User"),c=require("../../packages/log"),u=require("../../common/CommonValidator"),l=require("../adminAuditLog/AdminAuditLogService"),p=require("../../common/OperateType"),h=require("../../common/RepoResponse"),g=require("../../middle-ware");class y{constructor(){this.basePath="/api/users",this.router=t.Router(),this.initRouter()}initRouter(){this.router.get("",i.SessionUtil.check,i.CsrfToken.validate,this.getUserList),this.router.post("",i.SessionUtil.check,i.CsrfToken.validate,g.decryptPassword,this.addUser),this.router.put("/:id/password",i.SessionUtil.check,i.CsrfToken.validate,g.decryptPassword,this.changePassWord),this.router.put("/:id/password/reset",i.SessionUtil.check,i.CsrfToken.validate,g.decryptPassword,this.resetPassWord),this.router.put("/:id/role",i.SessionUtil.check,i.CsrfToken.validate,this.changeRole),this.router.delete("/:id",i.SessionUtil.check,i.CsrfToken.validate,this.delUserByUserId)}addUser(e,r,s){return o(this,void 0,void 0,(function*(){const o=e.body,t=e.ctx.userId,i=e.originalUrl,d=e.ctx.clientIp;try{yield u.CommonValidator.checkApiCount(d,i,y.ADDUSER_LIMIT_COUNT);const s=new n.User(o);yield a.userService.addUser(s,t);const g=c.OhpmLazyLogger.operateSuccess(e,"addUser");h.RepoResponse.ok(r),yield l.adminAuditLogService.addSuccessLog(t,p.OperateType.addUser,g)}catch(r){c.OhpmLazyLogger.operateFailure(e,"addUser"),yield l.adminAuditLogService.addFailureLog(t,p.OperateType.addUser,r.message),s(r)}}))}getUserList(e,r,s){return o(this,void 0,void 0,(function*(){try{const s=e.ctx.userId;yield a.userService.checkAdminPermission(s);const o=yield a.userService.getUserListByFilter(e.query);h.RepoResponse.success(r,o)}catch(e){s(e)}}))}delUserByUserId(e,r,s){return o(this,void 0,void 0,(function*(){const o=e.params.id,t=e.ctx.userId;try{yield a.userService.delUserByUserId(o,t);const s=c.OhpmLazyLogger.operateSuccess(e,"delUserByUserId");i.SessionUtil.deleteSessionByUserId(o),h.RepoResponse.ok(r),yield l.adminAuditLogService.addSuccessLog(t,p.OperateType.delUser,s)}catch(r){c.OhpmLazyLogger.operateFailure(e,"delUserByUserId"),yield l.adminAuditLogService.addFailureLog(t,p.OperateType.delUser,r.message),s(r)}}))}changePassWord(e,r,s){return o(this,void 0,void 0,(function*(){const o=e.params.id,t=e.body,d=t.password,n=t.oldPassword,u=[];try{yield a.userService.changePassWord(o,d,n,u),c.OhpmLazyLogger.operateSuccess(e,"changePassWord"),h.RepoResponse.ok(r)}catch(o){0===u.length?(c.OhpmLazyLogger.operateFailure(e,"changePassWord"),s(o)):(yield i.SessionUtil.remove(e.ctx.sessionId),c.OhpmLazyLogger.operateFailure(e,"changePassWord"),r.clearCookie("sessionId"),s(o))}}))}resetPassWord(e,r,s){return o(this,void 0,void 0,(function*(){const o=e.params.id,t=e.body,d=e.ctx.userId,n=t.password;try{yield a.userService.resetPassWord(o,d,n);const s=c.OhpmLazyLogger.operateSuccess(e,"resetPassWord");i.SessionUtil.deleteSessionByUserId(o),h.RepoResponse.ok(r),yield l.adminAuditLogService.addSuccessLog(d,p.OperateType.resetPassWord,s)}catch(r){c.OhpmLazyLogger.operateFailure(e,"resetPassWord"),yield l.adminAuditLogService.addFailureLog(d,p.OperateType.resetPassWord,r.message),s(r)}}))}changeRole(e,r,s){return o(this,void 0,void 0,(function*(){const o=e.params.id,t=e.ctx.userId,n=e.body.role;try{if(o===t)throw c.OhpmLazyLogger.operateFailure(e,"changeRole"),new d.RepoClientError(i.ErrorCode.UpdateUserSelf,"Users cannot modify their own role.");(yield a.userService.changeRole(o,t,n))&&i.SessionUtil.deleteSessionByUserId(o);const s=c.OhpmLazyLogger.operateSuccess(e,"changeRole");h.RepoResponse.ok(r),yield l.adminAuditLogService.addSuccessLog(t,p.OperateType.changeRole,s)}catch(r){c.OhpmLazyLogger.operateFailure(e,"changeRole"),yield l.adminAuditLogService.addFailureLog(t,p.OperateType.changeRole,r.message),s(r)}}))}}y.ADDUSER_LIMIT_COUNT=100,exports.userController=new y;