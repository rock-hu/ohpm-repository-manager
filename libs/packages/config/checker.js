"use strict";var e=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function s(e){try{f(r.next(e))}catch(e){i(e)}}function a(e){try{f(r.throw(e))}catch(e){i(e)}}function f(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}f((r=r.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.checkAllowNewFileUploadApi=exports.checkAllowRemoveDependedPackages=exports.checkLogs=exports.assertExistInYamlNotNull=exports.assertExistInYaml=exports.assertNumberExistInYaml=exports.checkLoglevel=exports.checkAndUpdateConfig=void 0;const o=require("../log"),r=require("../../utils/FsUtil"),n=t(require("path")),i=require("../../common/Constants"),s=require("./config"),a=require("./constants"),f=require("../../common/DbAndStoreType"),l=t(require("os")),c=require("../../common/RepoError"),m=require("../../common");function _(e){C(e.loglevel_run,"loglevel_run"),C(e.loglevel_operate,"loglevel_operate"),C(e.loglevel_access,"loglevel_access")}function g(e,t){if(void 0===e)throw new Error(`"${t}" in config file is not exist, please add the "${t}"`);if(!Number(e))throw new Error(`"${t}" in config file is not number type.`)}function p(e,t){if(void 0===e)throw new Error(`"${t}" in config file is not exist, please add the "${t}"`)}function u(e,t){if(void 0===e)throw new Error(`"${t}" in config file is not exist, please add the "${t}"`);if(String(e)&&!e)throw new Error(`"${t}" in config file is empty, please add the "${t}"`)}function h(e,t){const o=t===a.ConfigItemNames.DB?e.db:e.store;p(o,t),p(o.type,`${t}.type`),function(e,t){let o;o=t===a.ConfigItemNames.DB?e.db:e.store;if(t===a.ConfigItemNames.DB&&o.type!==f.DbType.FileDb.toString()&&o.type!==f.DbType.Mysql.toString())throw new Error(`type of "${t}" is wrong, should be set as "${f.DbType.FileDb}" or "${f.DbType.Mysql}"`);if(t===a.ConfigItemNames.STORE&&o.type!==f.StorageType.Fs.toString()&&o.type!==f.StorageType.Sftp&&o.type!==f.StorageType.Custom)throw new Error(`type of "${t}" is wrong, should be set as "${f.StorageType.Fs.toString()}" , "${f.StorageType.Sftp.toString()}" or "${f.StorageType.Custom.toString()}"`);if(t===a.ConfigItemNames.STORE&&(e.store.type===f.StorageType.Sftp||e.store.type===f.StorageType.Custom)&&e.db.type!==f.DbType.Mysql)throw new Error(`"${e.store.type}" is configured wrong, '${f.DbType.Mysql}' must be configured when "${e.store.type}" storage is used`)}(e,t),p(o.config,`${t}.config`);const r=o.config;o.type===f.DbType.Mysql&&function(e,t){p(e.host,`${t}.config.host`),p(e.port,`${t}.config.port`),u(e.database,`${t}.config.database`),u(e.username,`${t}.config.username`),u(e.password,`${t}.config.password`),I(e,f.DbType.Mysql)}(r,t),o.type===f.StorageType.Sftp&&function(e,t){if(!e.config)throw new Error('config "store.config.location" is empty, please add the config "store.config.location"');const o=e.config.location;if(!o||o.length<1||o.length>3)throw new Error('config "store.config.location" must be "[1, 3]" SFTP configurations');const r=new Set;if(o.map((e=>(r.add(e.name),null))),r.size!==o.length)throw new Error('the "name" configured for each SFTP server must be unique');for(let e=0;e<o.length;e++)u(o[e].name,`${t}.config.name`),p(o[e].host,`'${o[e].name}':${t}.config.location.host`),p(o[e].port,`'${o[e].name}':${t}.config.location.port`),u(o[e].read_username,`'${o[e].name}':${t}.config.location.read_username`),u(o[e].read_password,`'${o[e].name}':${t}.config.location.read_password`),u(o[e].write_username,`'${o[e].name}':${t}.config.location.write_username`),u(o[e].write_password,`'${o[e].name}':${t}.config.location.write_password`),E(o[e].path,o[e].name.toString()),I(o[e],f.StorageType.Sftp,o[e].name.toString())}(o,t),o.type===f.StorageType.Custom&&(u(r.export_name,`${t}.config.export_name`),u(r.plugin_path,`${t}.config.plugin_path`))}function E(e,t){if(void 0===e)throw new Error(`"${t}: path" in config file is not exist, please add the "${t}: path"`);if(e&&e.includes(".."))throw new Error(`path of "${f.StorageType.Sftp}: ${t}" is configured wrong: the relative path cannot contain "../" `);if(e&&/^(\.\/|\.\.\/)/.test(e))throw new Error(`path of "${f.StorageType.Sftp}: ${t}" is configured wrong: the relative path cannot contain "./" `)}exports.checkAndUpdateConfig=function(t){return e(this,void 0,void 0,(function*(){try{yield function(t){return e(this,void 0,void 0,(function*(){if(!t)throw new Error(`"${a.ConfigItemNames.DEPLOY_ROOT}" in config file is not exist, please add the "${a.ConfigItemNames.DEPLOY_ROOT}"`);if(!n.default.isAbsolute(t))throw new Error(`"${a.ConfigItemNames.DEPLOY_ROOT}" = "${t}" in config file is configured wrong: this path is not an absolute path`);if(t===i.Constants.DEFAULT_DATA_DIR&&(yield r.FsUtil.createDirIfNotExists(i.Constants.DEFAULT_DATA_DIR)),!(yield r.FsUtil.exists(t)))throw o.OhpmLazyLogger.error(`config "${a.ConfigItemNames.DEPLOY_ROOT}" = "${t}" is not exist or incorrect, please set the parameter correctly.`),new Error(`"${a.ConfigItemNames.DEPLOY_ROOT}" is configured wrong`);(0,i.updateDeployRoot)(t)}))}(t.deploy_root),yield d(t.logs_path),function(e){if(e.proto!==i.Constants.HTTP&&e.proto!==i.Constants.HTTPS)throw o.OhpmLazyLogger.error(`check "listen.proto = ${e.proto}" error, its value can only be '${i.Constants.HTTP}' or '${i.Constants.HTTPS}'.`),new Error('check "listen proto" from config.yaml error');e.proto===i.Constants.HTTP&&o.OhpmLazyLogger.warn(`"listen" protocol is set to '${i.Constants.HTTP}' in "config.yaml" file, which is insecure, advise to use the more secure '${i.Constants.HTTPS}' protocol instead.`);if("win32"===l.default.platform()){if(e.port<1||e.port>a.ConfigItemValue.MAX_PORT_SIZE)throw o.OhpmLazyLogger.error(`check "listen.port = ${e.port}" error, "listen.port" must be between [1, ${a.ConfigItemValue.MAX_PORT_SIZE}].`),new Error('check "listen port" from config.yaml error')}else if(e.port<a.ConfigItemValue.MIN_PORT_SIZE_LINUX||e.port>a.ConfigItemValue.MAX_PORT_SIZE)throw o.OhpmLazyLogger.error(`check "listen.port = ${e.port}" error, "listen.port" must be between [${a.ConfigItemValue.MIN_PORT_SIZE_LINUX}, ${a.ConfigItemValue.MAX_PORT_SIZE}].`),new Error('check "listen port" from config.yaml error');if(w.some((t=>e.host===t)))return;if(/^[0-9.]*$/.exec(e.host)){if(!a.ConfigItemValue.REG_IP.test(e.host))throw o.OhpmLazyLogger.error(`check "listen.host = ${e.host}" error, please refer the examples in the config.yaml file.`),new Error('check "listen host" from config.yaml error');return}if(!a.ConfigItemValue.REG_HOST.exec(e.host)||e.host.indexOf(".")<0)throw o.OhpmLazyLogger.error(`check "listen.host = ${e.host}" error, please refer the examples in the config.yaml file.`),new Error('check "listen host" from config.yaml error')}(t.listen),yield function(t){return e(this,void 0,void 0,(function*(){const e=t.https_key,o=t.https_cert;if("https"===t.listen.proto.toLowerCase()){if(null===o||0===o.length)throw new Error(`the listen's proto you set is https, "${a.ConfigItemNames.HTTPS_CERT}" in config file is not exist or empty, please add the "${a.ConfigItemNames.HTTPS_CERT}"`);if(null===e||0===e.length)throw new Error(`the listen's proto you set is https, "${a.ConfigItemNames.HTTPS_KEY}" in config file is not exist or empty, please add the "${a.ConfigItemNames.HTTPS_KEY}"`);const t=n.default.resolve(i.Constants.DATA_DIR,e),s=n.default.resolve(i.Constants.DATA_DIR,o);if(!(yield r.FsUtil.exists(t)))throw new Error(`"${a.ConfigItemNames.HTTPS_KEY}" path: "${t}" not incorrect or not exist, please add the correct path.`);if(!(yield r.FsUtil.exists(s)))throw new Error(`"${a.ConfigItemNames.HTTPS_CERT}" path: "${s}" not incorrect or not exist, please add the correct path.`)}}))}(t),function(e){if(function(e){g(e.max_package_size,a.ConfigItemNames.MAX_PACKAGE_SIZE),g(e.max_extract_size,a.ConfigItemNames.MAX_EXTRACT_SIZE),g(e.max_extract_file_num,a.ConfigItemNames.MAX_EXTRACT_FILE_NUM),g(e.user_rate_limit,a.ConfigItemNames.USER_RATE_LIMIT),g(e.fetch_timeout,a.ConfigItemNames.FETCH_TIMEOUT),g(e.keep_alive_timeout,a.ConfigItemNames.KEEP_ALIVE_TIMEOUT),g(e.api_timeout,a.ConfigItemNames.API_TIMEOUT),g(e.upload_lock_hour,a.ConfigItemNames.UPLOAD_LOCK_HOUR),g(e.upload_max_times,a.ConfigItemNames.UPLOAD_MAX_TIMES),g(e.operation_log_retention,a.ConfigItemNames.OPERATION_LOG_RETENTION)}(e),!(e.max_package_size>0&&e.max_package_size<=a.ConfigItemValue.MAX_PACKAGE_SIZE)){const e=`server.max_package_size must be between (0, ${a.ConfigItemValue.MAX_PACKAGE_SIZE}]`;throw new Error(e)}if(e.max_extract_size<e.max_package_size){const t=`server.max_extract_size must be greater than or equal to ${e.max_package_size}`;throw new Error(t)}if(e.max_extract_file_num<=0){throw new Error("server.max_extract_file_num must be greater than 0")}if(!(e.user_rate_limit>0&&e.user_rate_limit<=a.ConfigItemValue.MAX_RATE_LIMIT)){const e=`server.user_rate_limit must be between (0, ${a.ConfigItemValue.MAX_RATE_LIMIT}]`;throw new Error(e)}if(!(e.fetch_timeout>0&&e.fetch_timeout<=a.ConfigItemValue.MAX_TIMEOUT)){const e=`server.fetch_timeout must be between (0, ${a.ConfigItemValue.MAX_TIMEOUT}]`;throw new Error(e)}if(!(e.api_timeout>0&&e.api_timeout<=a.ConfigItemValue.MAX_TIMEOUT)){const e=`server.api_timeout must be between (0, ${a.ConfigItemValue.MAX_TIMEOUT}]`;throw new Error(e)}if(!(e.keep_alive_timeout>0&&e.keep_alive_timeout<=a.ConfigItemValue.MAX_ALIVE_TIMEOUT)){const e=`server.keep_alive_timeout must be between (0, ${a.ConfigItemValue.MAX_ALIVE_TIMEOUT}]`;throw new Error(e)}if(!(e.upload_lock_hour>0&&e.upload_lock_hour<=a.ConfigItemValue.MAX_LOCK_HOUR)){const e=`server.upload_lock_hour must be between (0, ${a.ConfigItemValue.MAX_LOCK_HOUR}]`;throw new Error(e)}if(!(e.upload_max_times>0&&e.upload_max_times<=a.ConfigItemValue.MAX_UPLOAD_TIMES)){const e=`server.upload_max_times must be between (0, ${a.ConfigItemValue.MAX_UPLOAD_TIMES}]`;throw new Error(e)}if(e.operation_log_retention<=0){throw new Error("server.operation_log_retention must be greater than 0")}}(t),h(t,a.ConfigItemNames.DB),h(t,a.ConfigItemNames.STORE),function(e,t){if(p(e,a.ConfigItemNames.UPLINK_CACHE_PATH),p(t,a.ConfigItemNames.UPLINK_CACHE_TIME),e.includes(".."))throw new Error(`"${a.ConfigItemNames.UPLINK_CACHE_PATH}" is configured wrong: the relative path cannot contain "..".`);if(!Number(t))throw new Error(`"${a.ConfigItemNames.UPLINK_CACHE_TIME}" in config file is not number type.`);if(t<=0)throw new Error(`""${a.ConfigItemNames.UPLINK_CACHE_TIME}"" in config file must be positive number.`);if(t>a.ConfigItemValue.MAX_CACHE_TIME)throw new Error(`"${a.ConfigItemNames.UPLINK_CACHE_TIME}" in config file is too large.`)}(t.uplink_cache_path,t.uplink_cache_time),_(t),T(t.allow_remove_depended_packages),function(e){if(e.compability_log_level){if(!a.ConfigItemValue.COMPABILITY_LOG_LEVEL.includes(e.compability_log_level))throw new c.RepoClientError(m.ErrorCode.CompabilityLogLevelError,`the value of "${a.ConfigItemNames.COMPABILITY_LOG_LEVEL} : ${e.compability_log_level}" in config.yaml is wrong, it can only be contained in "${a.ConfigItemValue.COMPABILITY_LOG_LEVEL}"`)}else e.compability_log_level=a.ConfigItemDefault.DEFAULT_COMPABILITY_LOG_LEVEL}(t),$(t.allow_new_file_upload_api),(0,s.updateConfig)(t)}catch(e){throw new Error(e.message)}}))},exports.checkLoglevel=_,exports.assertNumberExistInYaml=g,exports.assertExistInYaml=p,exports.assertExistInYamlNotNull=u;const w=["localhost","127.0.0.1","0.0.0.0"];function I(e,t,o=""){if("number"!=typeof e.port)throw new Error(`the type of the "${t}: ${o}" "port" must be a number`);if(e.port<1||e.port>a.ConfigItemValue.MAX_PORT_SIZE)throw new Error(`"port" of "${t} ${o}" is configured wrong, "port" must be between [1, ${a.ConfigItemValue.MAX_PORT_SIZE}]`);if(!w.some((t=>e.host===t))){if(/^[0-9.]*$/.exec(e.host)&&!a.ConfigItemValue.REG_IP.test(e.host))throw new Error(`"host" of "${t}: ${o}" is configured wrong: please refer the examples in the config.yaml file`);if(!a.ConfigItemValue.REG_HOST.exec(e.host)||e.host.indexOf(".")<0)throw new Error(`"host" of "${t}: ${o}" is configured wrong: please refer the examples in the config.yaml file`)}}function d(t){return e(this,void 0,void 0,(function*(){if(!t)throw new Error(`"${a.ConfigItemNames.LOGS_PATH}" in config file is not exist, please add the "${a.ConfigItemNames.LOGS_PATH}".`);if(t.includes(".."))throw new Error(`"${a.ConfigItemNames.LOGS_PATH}" = "${t}" in config file is configured wrong: the relative path cannot contain ../ `);try{const e=n.default.resolve(i.Constants.DATA_DIR,t);yield r.FsUtil.createDirIfNotExists(e),(0,i.updateLogsPath)(e)}catch(e){throw o.OhpmLazyLogger.error(`config "${a.ConfigItemNames.LOGS_PATH}" = "${t}" is incorrect, please set the parameters correctly. error: ${e}`),new Error(`"${a.ConfigItemNames.LOGS_PATH}" is configured wrong`)}}))}function C(e,t){if(u(e,t),!a.ConfigItemValue.LOG_LEVEL.includes(e))throw new Error(`"${t} = ${e}" in config file is configured wrong, it can only be contained in "${a.ConfigItemValue.LOG_LEVEL}"`)}function T(e){const t=a.ConfigItemNames.ALLOW_REMOVAL_OF_DEPENDENT_PACKAGES;if(void 0===e)throw new Error(`"${t}" in config file is not exist, please add the "${t}"`);if(!a.ConfigItemValue.ALLOW_REMOVAL_OF_DEPENDENT_PACKAGES.includes(e))throw new Error(`"${t} = ${e}" in config file is configured wrong, it can only be contained in "${a.ConfigItemValue.ALLOW_REMOVAL_OF_DEPENDENT_PACKAGES}"`)}function $(e){const t=a.ConfigItemNames.ALLOW_NEW_FILE_UPLOAD_API;if(void 0===e)s.config.allow_new_file_upload_api=a.ConfigItemDefault.DEFAULT_ALLOW_NEW_FILE_UPLOAD_API;else if(!a.ConfigItemValue.ALLOW_REMOVAL_OF_DEPENDENT_PACKAGES.includes(e))throw new Error(`"${t} = ${e}" in config file is configured wrong, it can only be contained in "${a.ConfigItemValue.ALLOW_REMOVAL_OF_DEPENDENT_PACKAGES}"`)}exports.checkLogs=d,exports.checkAllowRemoveDependedPackages=T,exports.checkAllowNewFileUploadApi=$;