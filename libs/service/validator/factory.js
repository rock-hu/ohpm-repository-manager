"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ValidationRuleFactory=exports.ValidationRuleHandlerFactory=void 0;const e=require("./handler"),t=require("./rule"),r=require("../../common/RepoError"),n=require("../../common"),i=require("../../packages/log"),u=require("./rule/ListItemLengthLimit"),a=require("./rule/CustomFunctionRule"),l=require("./customValidateFunc/customValidateFuncMap");exports.ValidationRuleHandlerFactory=class{static createHandler(t,r){const n=t.configs,i=new e.BaseRuleHandler;let u=i;for(const t of n){const n=o.createRule(t,r),i=new e.BaseRuleHandler(n);u.setNext(i),u=i}return i}};class o{static createRule(e,u){switch(e.ruleType){case t.ValidationRuleType.RegExp:return new t.RegExpRule(new RegExp(e.ruleContent),u);case t.ValidationRuleType.NotNull:return new t.NotNullRule(u);case t.ValidationRuleType.LengthLimit:return this.createLengthLimitRule(e.ruleContent,u);case t.ValidationRuleType.WhiteList:return this.createWhiteListRule(e.ruleContent,u);case t.ValidationRuleType.MapEntry:return this.createMapEntryRule(e.ruleContent,u);case t.ValidationRuleType.ListItemLengthLimit:return this.createItemLengthLimitRule(e.ruleContent,u);case t.ValidationRuleType.CustomFunction:return this.createCustomFunctionRule(e.ruleContent,u);default:throw i.OhpmLazyLogger.error(`unknown ValidationRuleType: ${e.ruleType}.`),new r.RepoClientError(n.ErrorCode.UnexpectedError,"Unknown Error")}}static createLengthLimitRule(e,r){const n=e.minLength,i=e.maxLength;return new t.LengthLimitRule(i,n,r)}static createWhiteListRule(e,u){let a=e.trim();a=a.replace(/;$/gi,"");const l=a.split(";");if(!Array.isArray(l))throw i.OhpmLazyLogger.error(`invalid ruleContent: "${e}" when createWhiteListRule.`),new r.RepoClientError(n.ErrorCode.UnexpectedError,"Unknown Error");return new t.WhiteListRule(l,u)}static createMapEntryRule(e,r){const n=o.createRule(e.keyRuleConfig,r),i=o.createRule(e.valueRuleConfig,r);return new t.MapEntryRule(n,i,r)}static createItemLengthLimitRule(e,t){const r=e.minLength,n=e.maxLength;return new u.ListItemLengthLimitRule(n,r,t)}static createCustomFunctionRule(e,t){const r=e.split(";"),n=[];return r.forEach((e=>n.push(l.customValidateFuncMap.get(e)))),new a.CustomFunctionRule(n,t)}}exports.ValidationRuleFactory=o;