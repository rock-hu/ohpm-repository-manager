"use strict";var e=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(i,n){function a(e){try{u(o.next(e))}catch(e){n(e)}}function c(e){try{u(o.throw(e))}catch(e){n(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,c)}u((o=o.apply(e,t||[])).next())}))},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.uplinkStorageService=void 0;const r=require("./UplinkStorage"),o=require("../UplinkRepository"),i=require("../../../utils/CommonConstants"),n=require("../../../packages/config/config"),a=require("../../../utils/CommonUtil"),c=t(require("node-fetch")),u=require("../uplink-proxy/UplinkProxyService"),s=require("../../../packages/log"),l=require("../../repo/RepoRepository"),p=require("../../../entity/Repo"),g=require("../../../entity/Uplink"),f=require("../../../common/CommonValidator"),m=require("../../../entity/Group"),d=require("../../../common/RepoError"),h=require("../../../common"),y=require("../../../common/OHPackageChecker"),k=require("../../../plugins/cache/CacheFactory");function v(t,r){return e(this,void 0,void 0,(function*(){const e=a.CommonUtil.contactUrl(r,t);try{const o=yield(0,c.default)(e,{agent:yield u.uplinkProxyService.getProxyAgent(r),timeout:1e3*n.config.fetch_timeout,redirect:"error"});if(o.ok)return s.OhpmLazyLogger.info(`fetch meta info of package ${t} success`,e),o.json();s.OhpmLazyLogger.info(`fail to fetch meta info of package ${t}`,`GET ${e} ${o.status}.`)}catch(e){s.OhpmLazyLogger.warn(`fail to search for package ${t} from ${r}`,e.message)}}))}exports.uplinkStorageService=new class{constructor(){this.cache=k.CacheFactory.createCache()}download(t){return e(this,void 0,void 0,(function*(){!function(e){if(f.CommonValidator.checkStringWithRegex(g.UPLINK_NAME_REGEX,"uplinkName",e.uplinkName),e.group){const t=e.group.slice(1);if(!t)throw new d.RepoClientError(h.ErrorCode.IllegalParameter,"Invalid parameter: group's name is empty.");if(!m.GROUP_NAME_REGEX.test(t)){const e=`Invalid parameter: ${t} - group's name can contain only lowercase letters, digits, hyphens (-), and underscores (_), and must start with a lower-case letter and end with a digit or a letter.`;throw new d.RepoClientError(h.ErrorCode.IllegalParameter,e)}}y.OHPackageChecker.ensureValidPkgName(e.pkgName),y.OHPackageChecker.ensureValidSemVer(e.version)}(t);const i=yield r.uplinkStorage.download(t.group,t.pkgName,t.version);if(i)return i;const a=yield o.uplinkRepository.getList({name:t.uplinkName});if(!a||a.total<=0)return;let l=t.pkgName;t.group&&(l=t.group.concat("/").concat(l));const p=yield v(l,a.recordList[0].url);if(!p)return;const k=Object.values(p.versions);if(!k||!k[0]._ohpmVersion)return void s.OhpmLazyLogger.info("only support ohpm registry.");const L=k.filter((e=>e.version===t.version?e:null));return L&&L.length<=0?void 0:function(t){return e(this,void 0,void 0,(function*(){const o=yield function(t,r){return e(this,void 0,void 0,(function*(){try{let e=yield(0,c.default)(r,{agent:yield u.uplinkProxyService.getProxyAgent(r),timeout:1e3*n.config.fetch_timeout,redirect:"manual"});if(e.ok)return s.OhpmLazyLogger.info(`fetch package ${t} form uplink done`,r),e.buffer();const o=e.headers.get("location");if(302===e.status&&o&&(e=yield(0,c.default)(o,{agent:yield u.uplinkProxyService.getProxyAgent(o),timeout:1e3*n.config.fetch_timeout}),e.ok))return s.OhpmLazyLogger.info(`fetch package ${t} form uplink done`,o),e.buffer()}catch(e){s.OhpmLazyLogger.warn(`fail to fetch package ${t} from uplink ${r}`,e.message)}s.OhpmLazyLogger.info(`fail to fetch package ${t} form uplink`,r)}))}(t.name,t.dist.tarball);if(!o)return;let i=t.name;t.name.startsWith("@")&&(i=i.split("/")[1]);const a=`${i}-${t.version}.har`;return r.uplinkStorage.save(o,t.name,a)}))}(L[0])}))}getMetadataFromUplink(t,r,a){return e(this,void 0,void 0,(function*(){const c=yield function(t){return e(this,void 0,void 0,(function*(){const e=yield l.repoRepository.getList({name:t});if(e&&e.total<=0)return void s.OhpmLazyLogger.info(`couldn't find the repo whose name is "${t}".`);const r=new p.Repo(e.recordList[0]);if(!r.getUplink())return;const i=yield o.uplinkRepository.getList({name:r.getUplink()});if(!(i&&i.total<=0))return new g.Uplink(i.recordList[0]);s.OhpmLazyLogger.info(`couldn't find the uplink whose name is "${r.getUplink()}".`)}))}(t);if(!c||!c.getUrl())return;const u=i.UPLINK_METADATA_CACHE_PRE.concat(r),f=yield this.cache.get(u);if(f)return f;const m=yield v(r,c.getUrl());if(!m)return;const d=Object.values(m.versions);if(d&&d[0]._ohpmVersion)return d.forEach((e=>{e.dist.tarball=`${a}/api/uplink-storage/${c.getName()}/${r}/-/${e.version}`})),yield this.cache.set(u,m,{ttl:60*n.config.uplink_cache_time*60}),m;s.OhpmLazyLogger.info("only support ohpm registry.")}))}};