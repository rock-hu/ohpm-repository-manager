"use strict";var e=this&&this.__createBinding||(Object.create?function(e,i,t,r){void 0===r&&(r=t);var o=Object.getOwnPropertyDescriptor(i,t);o&&!("get"in o?!i.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return i[t]}}),Object.defineProperty(e,r,o)}:function(e,i,t,r){void 0===r&&(r=t),e[r]=i[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,i){Object.defineProperty(e,"default",{enumerable:!0,value:i})}:function(e,i){e.default=i}),t=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var o in t)"default"!==o&&Object.prototype.hasOwnProperty.call(t,o)&&e(r,t,o);return i(r,t),r},r=this&&this.__awaiter||function(e,i,t,r){return new(t||(t=Promise))((function(o,s){function a(e){try{n(r.next(e))}catch(e){s(e)}}function c(e){try{n(r.throw(e))}catch(e){s(e)}}function n(e){var i;e.done?o(e.value):(i=e.value,i instanceof t?i:new t((function(e){e(i)}))).then(a,c)}n((r=r.apply(e,i||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.repoController=void 0;const s=t(require("express")),a=o(require("../../tools/formdataUpload")),c=require("../../common"),n=require("./RepoService"),u=require("../../entity/Repo"),d=require("./PageParam"),l=require("../client/login/OhUserInfo"),p=require("./UploadPackageVO"),h=require("./FileInfo"),g=require("../user/UserService"),y=require("../../packages/log"),m=require("../adminAuditLog/AdminAuditLogService"),v=require("../../common/OperateType"),f=require("../../common/RepoResponse"),S=require("../../common/CheckRepoExists"),k=require("../../utils/CommonConstants"),L=o(require("path")),b=require("../../common/Constants"),P=require("../../common/CommonValidator");class O{constructor(){this.basePath="/api/repos",this.router=s.Router(),this.upload=(0,a.default)({dest:L.default.join(b.Constants.DATA_DIR,"temp","uploads")}),this.initRouter()}initRouter(){this.router.get("",c.SessionUtil.check,c.CsrfToken.validate,this.getRepoList),this.router.get("/:id",c.SessionUtil.check,c.CsrfToken.validate,this.getPackageWithAllVersionList),this.router.put("/:id",c.SessionUtil.check,c.CsrfToken.validate,this.updateRepo),this.router.post("/:id/packages/analyze",c.SessionUtil.check,c.CsrfToken.validate,this.upload.single("file"),this.analyzePackage),this.router.post("/:id/packages",c.SessionUtil.check,c.CsrfToken.validate,this.upload.single("file"),this.uploadPackage),this.router.get("/packages/size",c.SessionUtil.check,c.CsrfToken.validate,this.getPackageSizeLimit),this.router.post("/discontinue",c.SessionUtil.check,c.CsrfToken.validate,this.unPublish),this.router.post("/discontinue/batch",c.SessionUtil.check,c.CsrfToken.validate,this.batchUnPublish),this.router.post("/discontinue/check",c.SessionUtil.check,c.CsrfToken.validate,this.checkBatchUnPublish)}getRepoList(e,i,t){return r(this,void 0,void 0,(function*(){try{yield g.userService.checkUserIsAdmin(e.ctx.userId);const t=yield(0,S.getRepoList)();f.RepoResponse.success(i,t)}catch(e){t(e)}}))}getPackageWithAllVersionList(e,i,t){return r(this,void 0,void 0,(function*(){try{P.CommonValidator.checkUUID(e.ctx.userId);const t=new d.PageParam(e.query);yield g.userService.checkUserIsAdmin(e.ctx.userId);const r=e.params.id;f.RepoResponse.success(i,yield n.repoService.getPackageWithAllVersionList(e.query,r,t))}catch(e){t(e)}}))}updateRepo(e,i,t){return r(this,void 0,void 0,(function*(){try{yield g.userService.checkUserIsAdmin(e.ctx.userId);const t=new u.Repo(e.body);t.setId(e.params.id),yield n.repoService.updateRepo(e.ctx.userId,t);const r=y.OhpmLazyLogger.operateSuccess(e,"updateRepo");f.RepoResponse.ok(i),yield m.adminAuditLogService.addSuccessLog(e.ctx.userId,v.OperateType.updateRepo,r)}catch(i){y.OhpmLazyLogger.operateFailure(e,"updateRepo"),yield m.adminAuditLogService.addFailureLog(e.ctx.userId,v.OperateType.updateRepo,i.message),t(i)}}))}analyzePackage(e,i,t){return r(this,void 0,void 0,(function*(){try{yield g.userService.checkUserIsAdmin(e.ctx.userId);const t=new h.FileInfo(e.file),r=yield n.repoService.analyzePackage(e.params.id,t);y.OhpmLazyLogger.operateSuccess(e,"analyzePackage"),f.RepoResponse.success(i,r)}catch(i){y.OhpmLazyLogger.operateFailure(e,"analyzePackage"),t(i)}}))}uploadPackage(e,i,t){return r(this,void 0,void 0,(function*(){try{const t=yield g.userService.getAdminUser(e.ctx.userId),r=new h.FileInfo(e.file),o=JSON.parse(e.body.packageInfo),s={repoId:e.params.id,fileInfo:r,user:new l.OhUserInfo(t),uploadPackageInfo:new p.UploadPackageVO(o)};y.OhpmLazyLogger.debug(`uploadPackage:reqBody:${JSON.stringify(o)}.`),r.size>k.USE_STREAM_THRESHOLD_SIZE<<20?yield n.repoService.uploadPackageByStream(s):yield n.repoService.uploadPackage(s);const a=y.OhpmLazyLogger.operateSuccess(e,"publish");f.RepoResponse.ok(i),yield m.adminAuditLogService.addSuccessLog(e.ctx.userId,v.OperateType.publish,a)}catch(i){y.OhpmLazyLogger.operateFailure(e,"publish"),yield m.adminAuditLogService.addFailureLog(e.ctx.userId,v.OperateType.publish,i.message),t(i)}}))}getPackageSizeLimit(e,i,t){return r(this,void 0,void 0,(function*(){try{yield g.userService.checkUserIsAdmin(e.ctx.userId);const t=n.repoService.getPackageSizeLimit();y.OhpmLazyLogger.operateSuccess(e,"getPackageSizeLimit"),f.RepoResponse.success(i,t)}catch(i){y.OhpmLazyLogger.operateFailure(e,"getPackageSizeLimit"),t(i)}}))}unPublish(e,i,t){return r(this,void 0,void 0,(function*(){try{yield g.userService.checkUserIsAdmin(e.ctx.userId),P.CommonValidator.checkLength(c.ErrorCode.unPublishReason,"reason",e.body.reason,256,2),yield n.repoService.unPublish(e.ctx.userId,e.body.id);const t=y.OhpmLazyLogger.operateSuccess(e,"unPublish"),r=JSON.parse(t);r.reason=e.body.reason,f.RepoResponse.ok(i),yield m.adminAuditLogService.addSuccessLog(e.ctx.userId,v.OperateType.unPublish,JSON.stringify(r))}catch(i){y.OhpmLazyLogger.operateFailure(e,"unPublish"),yield m.adminAuditLogService.addFailureLog(e.ctx.userId,v.OperateType.unPublish,i.message),t(i)}}))}batchUnPublish(e,i,t){return r(this,void 0,void 0,(function*(){try{const t=e.ctx.userId,r=e.body.ids;yield g.userService.checkUserIsAdmin(t),P.CommonValidator.checkLength(c.ErrorCode.unPublishReason,"reason",e.body.reason,256,2),yield n.repoService.batchUnPublish(t,r);const o=y.OhpmLazyLogger.operateSuccess(e,"batch unPublish"),s=JSON.parse(o);s.reason=e.body.reason,f.RepoResponse.ok(i),yield m.adminAuditLogService.addSuccessLog(e.ctx.userId,v.OperateType.batchUnPublish,JSON.stringify(s))}catch(i){y.OhpmLazyLogger.operateFailure(e,"batch unPublish"),yield m.adminAuditLogService.addFailureLog(e.ctx.userId,v.OperateType.batchUnPublish,i.message),t(i)}}))}checkBatchUnPublish(e,i,t){return r(this,void 0,void 0,(function*(){try{const t=e.ctx.userId,r=e.body.ids;yield g.userService.checkUserIsAdmin(t);const o=yield n.repoService.checkBatchUnPublish(t,r);f.RepoResponse.success(i,o)}catch(e){t(e)}}))}}exports.repoController=function(){return new O};