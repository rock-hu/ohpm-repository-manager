"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const o=require("./start"),t=require("./restart"),i=require("./stop"),r=require("./encrypt-pwd"),n=require("../common/Constants"),a=require("commander"),p=require("./pack"),s=require("./restore"),d=require("./deploy"),c=require("./checkStorage"),m=require("./mirrorStorage"),l=require("./install"),u=require("./removeInstance"),h=e(require("./migrateUserInfo/exportPkgInfoCmd")),g=e(require("./migrateUserInfo/batchPublishCmd")),f=e(require("./migrateUserInfo/exportUserinfoCmd")),y=e(require("./migrateUserInfo/importUserinfoCmd")),b=e(require("./migrateUserInfo/batchDownload/batchDownloadCmd")),k=new a.Command,C="Display help for command";k.configureHelp({sortSubcommands:!1,subcommandTerm:e=>e.name()}),k.name(n.Constants.NAME).usage("[command] [options]").version(n.Constants.VERSION,"-v, --version","Output the version number").allowExcessArguments(!1).allowUnknownOption(!1).addHelpCommand(void 0,C).helpOption(void 0,C),k.command("install").usage("[options]").option("--config <string>","This file is the cornerstone of ohpm-repo where you can modify the default behaviour, enable plugins and extend features").option("-sd, --skip-db,","Skip initializing MySQL database tables during command execution").description("install the ohpm-repo").helpOption(void 0,C).action(l.installCmd),k.command("start").usage("[options]").description("Start the ohpm-repo instance").helpOption(void 0,C).action(o.startCmd),k.command("restart").usage("[options]").description("Restart the ohpm-repo instance").helpOption(void 0,C).action(t.restartCmd),k.command("encrypt_password").usage("[options]").option("--crypto_path <string>","This path specifies the encryption component directory").description("Encrypt the data read from the standard input by using the specified encryption component, and output the ciphertext in the standard output").helpOption(void 0,C).action(r.encryptPwdCmd),k.command("pack").usage("<deploy_root> [options]").argument("<deploy_root>","The deploy root directory.").description("Backup the deploy root directory").action(p.packCmd),k.command("restore").usage("<file_path> [options]").argument("<file_path>","The file path of the packed file").description("Restore the deploy directory from the backup file").helpOption(void 0,C).action(s.restoreCmd),k.command("deploy").usage("<file_path> [options]").argument("<file_path>","The file path of the packed file").option("--deploy_root <string>","The deploy root directory").option("--logs <string>","The log directory").option("--uplinkCachePath <string>","The uplinkCachePath directory").option("-sd, --skip-db,","Skip initializing MySQL database tables during command execution").description("Deploy a new ohpm-repo instance with the backup file").helpOption(void 0,C).action(d.deployCmd),k.command("stop").description("Stop the ohpm-repo instance").helpOption(void 0,C).action(i.stopCmd),k.command("check_storage").usage("<target> [options]").argument("<target>",'Packages match "[<@scope>/]<pkg>[@<version>]" or "@all"').option("--failed","Only handle packages which download failed").description("Check whether packages exists in SFTP").helpOption(void 0,C).action(c.checkStorageCmd),k.command("mirror_storage").usage("<source_sftp> <target_sftp> <target> [options]").argument("<source_sftp>","The source SFTP's name").argument("<target_sftp>","The target SFTP's name").argument("<target>",'Packages match "[<@scope>/]<pkg>[@<version>]" or "@all"').option("--failed","Only handle packages which download failed").description("Mirror packages from the source SFTP to the target SFTP").helpOption(void 0,C).action(m.mirrorStorageCmd),k.command("remove_instance").usage("[options]").description("Delete instance information").helpOption(void 0,C).action(u.removeInstanceCmd),k.command("export_pkginfo").usage("[options]").option("--public-registry <string>","Configure the registry address of the OHPM repository").option("--http-proxy <string>","Configure public-registry agent").option("--filter <string>","Configure package filter regex").description("Export all package names to the current directory.").helpOption(void 0,C).action(h.default),k.command("batch_download").usage("[options]").argument("<pkg_list>","Record the JSON file of the package to be downloaded.").option("--public-registry <string>","Configure the registry address of the OHPM repository").option("--http-proxy <string>","Configure public-registry agent").option("--not-use-proxy <string>","Configuring address not to use a proxy").description("Downloading packages in batches").helpOption(void 0,C).action(b.default),k.command("batch_publish").usage("[options]").argument("<zip_file>",".zip file generated by running the batch-download command.").option("--force","Create a new group for the Administrators user").description("To upload packages in batches, create necessary users and organizations in advance.").helpOption(void 0,C).action(g.default),k.command("export_userinfo").usage("[options]").description("Export necessary database data to the current directory.").helpOption(void 0,C).action(f.default),k.command("import_userinfo").usage("[options]").argument("<zip_file>",".zip file generated by export_userinfo.").option("--clean-db","Clear the database before importing data").description('Import the backup data generated by "export_userinfo" to the database.').helpOption(void 0,C).action(y.default),k.parseOptions(process.argv),k.parse();